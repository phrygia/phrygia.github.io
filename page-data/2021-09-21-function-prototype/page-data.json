{"componentChunkName":"component---src-templates-post-jsx","path":"/2021-09-21-function-prototype/","result":{"data":{"site":{"siteMetadata":{"title":"phrygia dev.log"}},"markdownRemark":{"id":"e4a5dcd7-3dab-593f-832d-c6d0b249a7f6","excerpt":"자바스크립트는 원시타입(기본타입)과 참조타입으로 나뉜다. · 원시타입  Number  String  Boolean  undefined  null 원시타입을 제외한 모든값은 객체다.(즉, 참조타입은 객체다) 참조타입에는 원시타입을 제외한 모든타입, 배열, 함수, 정규표현식 등이 있다. 함수도 객체이기 때문에 값을 처리할 수 있으며 프로퍼티와 메서드도 가지고…","html":"<p>자바스크립트는 원시타입(기본타입)과 참조타입으로 나뉜다.</p>\n<p><strong>· 원시타입</strong></p>\n<ol>\n<li> Number</li>\n<li> String</li>\n<li> Boolean</li>\n<li> undefined</li>\n<li> null</li>\n</ol>\n<p>원시타입을 제외한 모든값은 객체다.(즉, 참조타입은 객체다) 참조타입에는 원시타입을 제외한 모든타입, 배열, 함수, 정규표현식 등이 있다. 함수도 객체이기 때문에 값을 처리할 수 있으며 프로퍼티와 메서드도 가지고 있다.</p>\n<h2>함수는 객체</h2>\n<p>자바스크립트의 함수는 Function 객체이다. 함수가 객체라서 가지는 특징은 다음과 같으며 이러한 작업이 가능한 객체를 <strong>일급객체</strong>라고 한다.</p>\n<ul>\n<li>함수는 변수나 프로퍼티나 배열 요소에 대입할 수 있다.</li>\n<li>함수는 함수의 인수로 사용할 수 있다.</li>\n<li>함수는 함수의 반환값으로 사용할 수 있다.</li>\n<li>함수는 프로퍼티와 메서드를 가질 수 있다.</li>\n<li>함수는 이름 없는 리터럴로 표현할 수 있다(익명함수).</li>\n<li>함수는 동적으로 생성할 수 있다.</li>\n</ul>\n<p>일급 객체인 함수는 <strong>일급함수</strong>라고도 한다.</p>\n<h2>함수의 프로퍼티(메서드)</h2>\n<p>함수는 Function 생성자의 prototype 객체의 프로퍼티를 상속받아서 사용한다.</p>\n<h3>1. call()</h3>\n<div class=\"blockquote\">\n    func.call([thisArg[, arg1, arg2, ...argN]])\n</div>  \n-&nbsp;thisArg: func 호출에 제공되는 this의 값.<br>\n이미 할당되어있는 다른 객체의 함수/메소드를 호출하는 해당 객체에 재할당할때 사용된다. 함수의 call 메서드를 호출할 때 인자로 객체를 전달하면 그 객체를 함수의 this에 할당하고 함수를 호출한다.<br><br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grettings<span class=\"token punctuation\">,</span> honorifics</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>grettings <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> honorifics <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> phrygia <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"phrygia\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> penny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"penny\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// \"Nice to meet you I\"m phrygia\"</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>phrygia<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nice to meet you\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I\"m'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// \"Hello Are you penny\"</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>penny<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Are you\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 예제에서 say.call을 사용할때 사용된 인자의 객체가 this로 할당되어 각 객체의 name에 해당하는 value값이 호출되었다.</p>\n<h3>2. apply()</h3>\n<div class=\"blockquote\">\n    func.apply(thisArg, [argsArray])\n</div> \n-&nbsp;thisArg: func를 호출하는데 제공될 this 의 값 <br>\n-&nbsp;argsArray: func가 호출되어야 하는 인수를 지정하는 유사 배열 객체<br>\n*apply와 거의 동일하지만 call은 인수를 쉼표(,)로 구분한 값으로 전달받고 apply는 배열로 받는다는 차이점이 있다. <br><br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grettings<span class=\"token punctuation\">,</span> honorifics</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>grettings <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> honorifics <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> phrygia <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"phrygia\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> penny <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"penny\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// \"Nice to meet you I\"m phrygia\"</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>phrygia<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Nice to meet you\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I\"m'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// \"Hello Are you penny\"</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>penny<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Are you\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>3. bind()</h3>\n<div class=\"blockquote\">\n    func.bind(thisArg[, arg1[, arg2[, ...]]])\n</div> \n-&nbsp;thisArg: 바인딩 함수가 대상 함수(target function)의 this에 전달하는 값<br>\nFunction 객체의 bind 메서드는 객체에 함수를 바인드(묶다, 속박하다)한다. bind 메서드가 호출되면 새로운 함수를 생성하며 첫번째 인자의 value로는 this 키워드를 설정하고 뒤의 인자들은 바인드된 함수의 인수에 할당된 함수를 반환한다. 간단하게 말하자면 function에 인자로 넘긴 this가 바인딩 된 새로운 함수를 반환한다고 생각하면 된다.<br>\n*call, apply와의 차이점은 call, apply는 실행결과로 함수가 호출이지만 bind는 새로운 함수를 리턴한다는 점이다. <br><br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grettings<span class=\"token punctuation\">,</span> honorifics</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>grettings <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> honorifics <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> phrygia <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"phrygia\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> sayToPhrygia <span class=\"token operator\">=</span> <span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>phrygia<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Nice to meet you I'm phrygia</span>\n<span class=\"token function\">sayToPhrygia</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nice to meet you\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I\"m'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드에서 sayToPhrygia 함수를 호출하면 항상 this가 객체 phrygia를 가리킨다.\n<br></p>\n<p>위의 3가지 프로퍼티들은 this값과 인수를 사용하여 실행하며 this를 지정하는데 유용한 메소드들이다.\nthis는 메서드 내부의 객체에 접근 할 수 있기도 하고 실행컨텍스트에 따라 this의 값이 다르기 때문에 꼭 알아둬야 할 중요한 개념이다. 다음번엔 this에 대한 정리를 해봐야 겠다.</p>\n<p><small class=\"from add\">참고 : 모던 자바스크립트 입문(이소 히로시), <a href=\"https://developer.mozilla.org/ko/\" target=\"_blank\">MDN</a></small></p>","frontmatter":{"title":"[javascript] 함수의 call, apply, bind 메서드","date":"September 21, 2021","update":null,"tags":["javascript"],"series":null},"fields":{"slug":"/2021-09-21-function-prototype/","readingTime":{"minutes":5.445}}},"seriesList":{"edges":[{"node":{"id":"a49ba7fe-2298-5593-99e5-fc94628ca08c","fields":{"slug":"/2021-09-21-vue-clap-button/"},"frontmatter":{"title":"[vue] 박수치기 버튼 만들기 (vue clap button)"}}},{"node":{"id":"86892888-c819-59c7-a91e-8dba2c018aa3","fields":{"slug":"/2021-09-21-sematic-tag/"},"frontmatter":{"title":"[html] Semantic Tag Layout (시맨틱 태그)"}}},{"node":{"id":"0cf44020-e73b-5d81-97ab-eb71a6a2f774","fields":{"slug":"/2021-09-21-javascript-object/"},"frontmatter":{"title":"[javascript] 객체 수정 제어 : preventExtensions(), seal(), freeze()"}}},{"node":{"id":"87f26728-3fd2-5307-914c-b108135a8fdd","fields":{"slug":"/2021-09-21-rwd-awd/"},"frontmatter":{"title":"[web] 반응형(RWD)웹과 적응형(AWD)웹"}}},{"node":{"id":"e5af2a5d-1fa4-5015-b69d-d3df92d26d5c","fields":{"slug":"/2021-09-21-react-modal/"},"frontmatter":{"title":"[react] 모달 팝업창 만들기 (react modal)"}}},{"node":{"id":"e4a5dcd7-3dab-593f-832d-c6d0b249a7f6","fields":{"slug":"/2021-09-21-function-prototype/"},"frontmatter":{"title":"[javascript] 함수의 call, apply, bind 메서드"}}},{"node":{"id":"5f56739f-415e-566a-9e1b-e5b385ba25d3","fields":{"slug":"/2021-09-21-scroll/"},"frontmatter":{"title":"[html] 특정 영역으로 스크롤 이동 - 앵커기능(anchor) vs data 속성"}}},{"node":{"id":"a038fa37-3752-59b0-83e1-77252e300845","fields":{"slug":"/2021-09-21-object/"},"frontmatter":{"title":"[javascript] Object.assign() & Object.create()"}}},{"node":{"id":"9cc5e665-eee9-55ba-bc71-f83945e975df","fields":{"slug":"/2021-09-21-scope/"},"frontmatter":{"title":"[javascript] execution context, scope (실행 컨텍스트, 스코프)"}}},{"node":{"id":"d1fa176c-5bf0-5be0-a723-0b08fc3de5d1","fields":{"slug":"/2021-09-21-hoisting/"},"frontmatter":{"title":"[javascript] hoisting (호이스팅)"}}},{"node":{"id":"327dc0b1-3014-5570-8752-54a472ce4dcb","fields":{"slug":"/2021-09-21-closure/"},"frontmatter":{"title":"[javascript] closure (클로저)"}}},{"node":{"id":"cdaec2e2-37a5-515e-85f9-3cc8150d62b5","fields":{"slug":"/2021-10-26-gaysby/"},"frontmatter":{"title":"[gatsby] Google Search Console과 Analytics 추가하기"}}},{"node":{"id":"d39b84bd-dd38-56db-ae71-e1536a6f66bb","fields":{"slug":"/2021-10-27-react-firebase/"},"frontmatter":{"title":"[react] firebase 프로젝트 배포하기"}}},{"node":{"id":"39469573-8887-50f5-959e-048e8fbac3d9","fields":{"slug":"/2021-10-30-var-let-const/"},"frontmatter":{"title":"[javascript] var, let, const"}}},{"node":{"id":"1d0b228b-a81b-5692-96b9-876668a4bb8d","fields":{"slug":"/2021-11-09-algorithm/"},"frontmatter":{"title":"[algorithm] 약수, 소수, 최대공약수, 최소공배수"}}},{"node":{"id":"11a3e5c7-dd76-5f0a-95ac-eef303421178","fields":{"slug":"/2021-11-25-mui-react/"},"frontmatter":{"title":"[react] Material ui 템플릿 (Mui) 으로 회원가입 페이지 만들기 "}}},{"node":{"id":"66c4b29a-927c-5d55-b1b5-9c3f8a2e08ea","fields":{"slug":"/2021-11-28-algorithm/"},"frontmatter":{"title":"[algorithm] LeetCode 139. Word Break "}}},{"node":{"id":"b0ff1b19-b212-5308-a03d-549609b1cbf5","fields":{"slug":"/2021-12-02-bigO/"},"frontmatter":{"title":"[algorithm] 자바스크립트 빅오 표기법 (Big-O)"}}},{"node":{"id":"7b77461b-7632-57fa-ae82-674d2e5873ec","fields":{"slug":"/2021-12-07-sorting-algorithm/"},"frontmatter":{"title":"[algorithm] 정렬 알고리즘 - 버블, 삽입, 선택, 병합, 퀵"}}},{"node":{"id":"b8d3db01-c9d0-5533-bce9-4852ce246694","fields":{"slug":"/2021-12-12-gaysby/"},"frontmatter":{"title":"[gatsby] gaysby로 TIL만들기"}}},{"node":{"id":"9a40e149-1d55-55e8-9377-47d54cf324d6","fields":{"slug":"/2021-12-14-codility/"},"frontmatter":{"title":"[algorithm] Codility Lesson 4. MissingInteger"}}},{"node":{"id":"82820512-6ca7-5276-a5b3-1325a39344d1","fields":{"slug":"/2021-12-22-react-redux-persist/"},"frontmatter":{"title":"[react] react프로젝트에 redux-persist 적용하기"}}},{"node":{"id":"f29620f6-3bd9-56eb-8239-a31f00b3363d","fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}}},{"node":{"id":"c056e9c2-9b42-5395-885a-63f763406f36","fields":{"slug":"/2022-01-27-styled-components/"},"frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기"}}},{"node":{"id":"41c02eb7-f88d-5bd8-a3cf-593a93056f95","fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},{"node":{"id":"6a9e7416-f1ad-5ac8-97a1-f94e647cd5fa","fields":{"slug":"/2022-02-18-react/"},"frontmatter":{"title":"[react] CRA없이 React환경 구축하기 (웹팩, 바벨)"}}},{"node":{"id":"527df9ef-44b6-5e3b-9249-2b2b3fa1ac1c","fields":{"slug":"/2022-03-03-react-modal/"},"frontmatter":{"title":"[react] transition이 적용된 Modal 만들기"}}},{"node":{"id":"2f8812c5-dbf6-582e-9d44-51f2023d3b4c","fields":{"slug":"/2022-04-05-react/"},"frontmatter":{"title":"[react] react 코딩 컨벤션"}}},{"node":{"id":"da92f528-b51e-5054-87c5-1f36cec6a97b","fields":{"slug":"/2022-03-09/"},"frontmatter":{"title":"[diary] 프론트엔드 신입 면접 준비하기"}}},{"node":{"id":"b8e04d5f-aab0-5c87-bdd0-7fd3bea4b241","fields":{"slug":"/2022-04-25-git-basic/"},"frontmatter":{"title":"[git] git 기본 사용법"}}},{"node":{"id":"fcdfde95-211e-5fae-b419-b798b39c230d","fields":{"slug":"/2022-04-25-browsers-repository/"},"frontmatter":{"title":"[web] Storage vs Cookie"}}},{"node":{"id":"d1e364e6-edec-506d-b919-41d02b91b667","fields":{"slug":"/2022-04-25-redux-saga/"},"frontmatter":{"title":"[redux] Redux Saga"}}},{"node":{"id":"cabe57d4-a242-5b13-82b0-43ed5458cd03","fields":{"slug":"/2022-04-25-hooks/"},"frontmatter":{"title":"[react] React Hooks (리액트 훅스)"}}},{"node":{"id":"f7ae8bd6-d30a-52ea-bc25-4cb6dd900280","fields":{"slug":"/2022-04-25-virtual-dom/"},"frontmatter":{"title":"[react] Virtual Dom (가상 돔)"}}},{"node":{"id":"8f80827a-ba2b-55b7-9ed1-148827c19873","fields":{"slug":"/2022-04-25-async-await/"},"frontmatter":{"title":"[javascript] Async await"}}},{"node":{"id":"02581db7-7b59-5b5b-ad64-5b7f093151cd","fields":{"slug":"/2022-04-25-js-runtime/"},"frontmatter":{"title":"[javascript] 자바스크립트 런타임"}}},{"node":{"id":"3b3084d4-9cdc-5003-8eb6-7449b17bb244","fields":{"slug":"/2022-04-25-promise/"},"frontmatter":{"title":"[javascript] Promise"}}},{"node":{"id":"633854f2-750f-5d46-b542-65323e325c47","fields":{"slug":"/2022-04-25-throttle-debounce/"},"frontmatter":{"title":"[javascript] throttling과 debouncing"}}},{"node":{"id":"45b950b8-83ca-561c-832d-103769b353a1","fields":{"slug":"/2022-04-25-url-web/"},"frontmatter":{"title":"[web] 브라우저에 URL을 입력했을 때 발생하는 일들"}}},{"node":{"id":"9e551fd8-ac87-5bf1-b009-76368e5d010e","fields":{"slug":"/2022-06-12/"},"frontmatter":{"title":"[diary] 성장하는 개발자"}}},{"node":{"id":"8250c92a-0f9d-5c47-be28-9cb616399585","fields":{"slug":"/2022-08-06-react-query/"},"frontmatter":{"title":"[react] React Query 기초"}}},{"node":{"id":"0282216d-5c95-5f37-b0d3-75173c2d0f02","fields":{"slug":"/2022-08-15-recoil/"},"frontmatter":{"title":"[react] Recoil 상태관리 라이브러리"}}},{"node":{"id":"4cf7e012-6c31-5681-a23e-f451f55f9ef3","fields":{"slug":"/2022-11-06-nextjs-13/"},"frontmatter":{"title":"[nextjs] Next.js 13"}}},{"node":{"id":"9cedfe8b-a05b-5bb1-b717-3b12ebae6193","fields":{"slug":"/2023-01-08/"},"frontmatter":{"title":"[diary] 2022년 회고"}}},{"node":{"id":"7571a5e0-4bbc-5824-9acf-d483240a8a69","fields":{"slug":"/2023-01-23-array-to-object/"},"frontmatter":{"title":"[javascript] 배열에서 특정값을 선택해서 객체로 변환하기 (배열을 객체로)"}}},{"node":{"id":"22dc2db7-3b64-579b-ab94-a1f2e27de264","fields":{"slug":"/2023-03-03-git/"},"frontmatter":{"title":"[git] 실무에서 사용했던 git 정리"}}},{"node":{"id":"2c4d88b2-d6fa-5445-949e-5764e2226ca5","fields":{"slug":"/2023-08-15-vercel-node-version-update/"},"frontmatter":{"title":"[nextjs] nextjs node버전 업데이트 여정 (tailwind custom class error)"}}},{"node":{"id":"3c536648-1dae-55d5-8a0a-4dd5655f02be","fields":{"slug":"/2023-12-11-npm-install/"},"frontmatter":{"title":"[npm/yarn] 한 프로젝트에서 같은 라이브러리 다른 버전 설치하기"}}}]},"previous":{"fields":{"slug":"/2021-09-21-react-modal/"},"frontmatter":{"title":"[react] 모달 팝업창 만들기 (react modal)"}},"next":{"fields":{"slug":"/2021-09-21-scroll/"},"frontmatter":{"title":"[html] 특정 영역으로 스크롤 이동 - 앵커기능(anchor) vs data 속성"}}},"pageContext":{"id":"e4a5dcd7-3dab-593f-832d-c6d0b249a7f6","series":null,"previousPostId":"e5af2a5d-1fa4-5015-b69d-d3df92d26d5c","nextPostId":"5f56739f-415e-566a-9e1b-e5b385ba25d3"}},"staticQueryHashes":[],"slicesMap":{}}