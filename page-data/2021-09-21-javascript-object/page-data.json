{"componentChunkName":"component---src-templates-post-jsx","path":"/2021-09-21-javascript-object/","result":{"data":{"site":{"siteMetadata":{"title":"phrygia dev.log"}},"markdownRemark":{"id":"0cf44020-e73b-5d81-97ab-eb71a6a2f774","excerpt":"는 블록 스코프이며, 변수의 재선언 및 재할당이 모두 불가능하다.\n흔히 여기서 오는 오해 중 하나가 const로 정의하면 객체 속성값도 수정할 수 없다고 생각하지만, const로 정의해도 객체의 내부 속성값은 수정이 가능하다. (객체를 참조하는 변수를 수정하는 것은 불가능 하다.) - JS 객체에서 이미 존재하는 속성값을 수정하거나 새로운 값을 추가하는 …","html":"<p><code class=\"language-text\">const</code>는 블록 스코프이며, 변수의 재선언 및 재할당이 모두 불가능하다.<br>\n흔히 여기서 오는 오해 중 하나가 const로 정의하면 객체 속성값도 수정할 수 없다고 생각하지만, const로 정의해도 객체의 내부 속성값은 수정이 가능하다. (객체를 참조하는 변수를 수정하는 것은 불가능 하다.)</p>\n<p><strong>- JS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"banana\"</span> <span class=\"token punctuation\">}</span>\nfruit<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"apple\"</span>\nfruit<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { name: 'apple', color: 'red' };</span>\n\n<span class=\"token comment\">//배열도 객체의 일종이기 때문에 속성값을 수정할 수 있다.</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [10, 2, 30];</span>\n\n<span class=\"token comment\">// const로 정의된 변수에 재할당은 불가능하다.</span>\n<span class=\"token keyword\">const</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"banana\"</span> <span class=\"token punctuation\">}</span>\nfruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 에러</span></code></pre></div>\n<p>객체에서 이미 존재하는 속성값을 수정하거나 새로운 값을 추가하는 것은 모두 가능하다. 객체의 내부 속성값을 수정하지 못하게 하고 싶다면 유명한 불변성 패키지인 immer.js, immutable.js 등을 사용하면 된다. (immer.js는 리액트에서도 많이이 쓰이기 때문에 알아두면 좋다.) 이러한 패키지들은 기존 객체를 수정하지 않고 새롭게 객체를 생성한다.</p>\n<p>다음의 JS내장 함수는 불변성 외부 패키지에서 새롭게 객체를 생성하는 편의성은 필요 없고 수정만 할 수 없도록 만들고 싶을 때 사용하면 유용하다.</p>\n<ul>\n<li>Object.preventExtensions</li>\n<li>Object.seal</li>\n<li>Object.freeze</li>\n</ul>\n<h2>1. Object.preventExtensions</h2>\n<p>   새로운 속성을 객체에 추가되는 것을 방지한다. (<strong>확장 금지</strong>) 값의 추가만 금지되고 삭제, 속성 변경, 프로퍼티에 값을 할당하는 작업은 가능하다.<br></p>\n<div class=\"blockquote\">\nObject.preventExtensions(obj)&nbsp;&nbsp;  // obj : 확장을 방지할 대상 객체.\n</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"work?\"</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Object { prop1: \"work?\" }</span>\n\n<span class=\"token comment\">// 객체가 확장 가능한지 여부 판별</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token comment\">// 확장 금지</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\n\n<span class=\"token comment\">// 값을 추가해도 추가되지 않는다.</span>\nobject1<span class=\"token punctuation\">.</span>prop2 <span class=\"token operator\">=</span> <span class=\"token string\">\"add\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Object { prop1: \"work?\" }</span>\n\n<span class=\"token comment\">// 프로퍼티에 값을 할당하는 작업은 가능하다.</span>\nobject1<span class=\"token punctuation\">.</span>prop1 <span class=\"token operator\">=</span> <span class=\"token string\">\"change!\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Object { prop1: \"change!\" }</span>\n\n<span class=\"token comment\">// 프로퍼티의 값을 삭제하는 것도 가능하다.</span>\n<span class=\"token keyword\">delete</span> object1<span class=\"token punctuation\">.</span>prop1\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Object {  }</span></code></pre></div>\n<h2>2. Object.seal</h2>\n<p>객체를 <strong>봉인</strong>해서 새로운 속성을 추가하거나 제거하지 못하게 한다. 기존 프로퍼티를 변경하는 것은 불가능 하지만 쓰기 가능한 속성(writable)의 값은 변경할 수 있다. <br></p>\n<div class=\"blockquote\">\nObject.seal(obj)&nbsp;&nbsp;  // obj : 봉인할 객체.\n</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">bar</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"bar\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 객체 봉인</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 객체가 봉인됐는지 여부 판별</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token comment\">// 객체 추가 불가능</span>\nobject1<span class=\"token punctuation\">.</span>addFoo <span class=\"token operator\">=</span> <span class=\"token string\">\"addFoo\"</span>\n\n<span class=\"token comment\">// 기본적으로 프로퍼티의 writable은 true로 설정되어 있기 때문에 수정 불가능하게 만들고 싶다면 false로 수정한다.</span>\nobject1<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"change !\"</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nobject1<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"change !!\"</span>\n\n<span class=\"token comment\">// writable을 false로 선언하기 전에 바꾼 속성값으로 적용되어 있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Object { foo: \"change !\", bar: function () { return \"bar\"; } }</span>\n\n<span class=\"token comment\">// 객체 삭제 불가능</span>\n<span class=\"token keyword\">delete</span> object1<span class=\"token punctuation\">.</span>foo\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Object { foo: \"change !\", bar: function () { return \"bar\"; } }</span></code></pre></div>\n<h2>3. Object.freeze</h2>\n<p>이 메서드는 객체를 <strong>동결</strong> 시키며, 다음과 같은 작업이 불가능해진다. 동결은 소개하는 3가지 메서드중 가장 높은 단계의 불변성을 적용한다.</p>\n<ul>\n<li>새로운 속성(메서드, 프로퍼티) 추가 금지</li>\n<li>존재하는 속성 제거 금지</li>\n<li>존재하는 속성의 불변성, 설정 가능성(configurability), 작성 가능성 변경 금지</li>\n<li>존재하는 속성의 값 변경 금지</li>\n<li>프로포타입 변경 금지</li>\n</ul>\n<div class=\"blockquote\">\nObject.freeze(obj)&nbsp;&nbsp;  // obj : 동결할 객체.\n</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 객체가 동결됐는지 여부 판별</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 객체 추가 불가능</span>\nobject1<span class=\"token punctuation\">.</span>prop2 <span class=\"token operator\">=</span> <span class=\"token string\">\"add\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Object { prop1: 42 }</span>\n\n<span class=\"token comment\">// 객체 수정 불가능</span>\nobject1<span class=\"token punctuation\">.</span>prop1 <span class=\"token operator\">=</span> <span class=\"token number\">33</span> <span class=\"token comment\">// strict모드 에서는 Error 출력</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">.</span>prop1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\n\n<span class=\"token comment\">// 객체 삭제 불가능</span>\n<span class=\"token keyword\">delete</span> object1<span class=\"token punctuation\">.</span>prop1\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Object { prop1: 42 }</span></code></pre></div>\n<ul>\n<li>\"use strict\" 모드를 사용</li>\n<li>*위의 메서드가 적용되어진 객체가 참조하는 다른 객체까지 수정 제어하는 것이 아니기 때문에 얕은 불변성만 지원한다. 더욱 엄격하게 객체를 제어하고 싶다면 외부 패키지를 이용하면 더 좋을 것 같다.</li>\n</ul>\n<p><small class=\"from add\">참고 : 실전리액트 프로그래밍 - 이재승<br></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions</a><br></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/seal</a><br></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze</a>\n</small></p>","frontmatter":{"title":"[javascript] 객체 수정 제어 : preventExtensions(), seal(), freeze()","date":"September 21, 2021","update":null,"tags":["javascript"],"series":null},"fields":{"slug":"/2021-09-21-javascript-object/","readingTime":{"minutes":5.905}}},"seriesList":{"edges":[{"node":{"id":"a49ba7fe-2298-5593-99e5-fc94628ca08c","fields":{"slug":"/2021-09-21-vue-clap-button/"},"frontmatter":{"title":"[vue] 박수치기 버튼 만들기 (vue clap button)"}}},{"node":{"id":"86892888-c819-59c7-a91e-8dba2c018aa3","fields":{"slug":"/2021-09-21-sematic-tag/"},"frontmatter":{"title":"[html] Semantic Tag Layout (시맨틱 태그)"}}},{"node":{"id":"0cf44020-e73b-5d81-97ab-eb71a6a2f774","fields":{"slug":"/2021-09-21-javascript-object/"},"frontmatter":{"title":"[javascript] 객체 수정 제어 : preventExtensions(), seal(), freeze()"}}},{"node":{"id":"87f26728-3fd2-5307-914c-b108135a8fdd","fields":{"slug":"/2021-09-21-rwd-awd/"},"frontmatter":{"title":"[web] 반응형(RWD)웹과 적응형(AWD)웹"}}},{"node":{"id":"e5af2a5d-1fa4-5015-b69d-d3df92d26d5c","fields":{"slug":"/2021-09-21-react-modal/"},"frontmatter":{"title":"[react] 모달 팝업창 만들기 (react modal)"}}},{"node":{"id":"e4a5dcd7-3dab-593f-832d-c6d0b249a7f6","fields":{"slug":"/2021-09-21-function-prototype/"},"frontmatter":{"title":"[javascript] 함수의 call, apply, bind 메서드"}}},{"node":{"id":"5f56739f-415e-566a-9e1b-e5b385ba25d3","fields":{"slug":"/2021-09-21-scroll/"},"frontmatter":{"title":"[html] 특정 영역으로 스크롤 이동 - 앵커기능(anchor) vs data 속성"}}},{"node":{"id":"a038fa37-3752-59b0-83e1-77252e300845","fields":{"slug":"/2021-09-21-object/"},"frontmatter":{"title":"[javascript] Object.assign() & Object.create()"}}},{"node":{"id":"9cc5e665-eee9-55ba-bc71-f83945e975df","fields":{"slug":"/2021-09-21-scope/"},"frontmatter":{"title":"[javascript] execution context, scope (실행 컨텍스트, 스코프)"}}},{"node":{"id":"d1fa176c-5bf0-5be0-a723-0b08fc3de5d1","fields":{"slug":"/2021-09-21-hoisting/"},"frontmatter":{"title":"[javascript] hoisting (호이스팅)"}}},{"node":{"id":"327dc0b1-3014-5570-8752-54a472ce4dcb","fields":{"slug":"/2021-09-21-closure/"},"frontmatter":{"title":"[javascript] closure (클로저)"}}},{"node":{"id":"cdaec2e2-37a5-515e-85f9-3cc8150d62b5","fields":{"slug":"/2021-10-26-gaysby/"},"frontmatter":{"title":"[gatsby] Google Search Console과 Analytics 추가하기"}}},{"node":{"id":"d39b84bd-dd38-56db-ae71-e1536a6f66bb","fields":{"slug":"/2021-10-27-react-firebase/"},"frontmatter":{"title":"[react] firebase 프로젝트 배포하기"}}},{"node":{"id":"39469573-8887-50f5-959e-048e8fbac3d9","fields":{"slug":"/2021-10-30-var-let-const/"},"frontmatter":{"title":"[javascript] var, let, const"}}},{"node":{"id":"1d0b228b-a81b-5692-96b9-876668a4bb8d","fields":{"slug":"/2021-11-09-algorithm/"},"frontmatter":{"title":"[algorithm] 약수, 소수, 최대공약수, 최소공배수"}}},{"node":{"id":"11a3e5c7-dd76-5f0a-95ac-eef303421178","fields":{"slug":"/2021-11-25-mui-react/"},"frontmatter":{"title":"[react] Material ui 템플릿 (Mui) 으로 회원가입 페이지 만들기 "}}},{"node":{"id":"66c4b29a-927c-5d55-b1b5-9c3f8a2e08ea","fields":{"slug":"/2021-11-28-algorithm/"},"frontmatter":{"title":"[algorithm] LeetCode 139. Word Break "}}},{"node":{"id":"b0ff1b19-b212-5308-a03d-549609b1cbf5","fields":{"slug":"/2021-12-02-bigO/"},"frontmatter":{"title":"[algorithm] 자바스크립트 빅오 표기법 (Big-O)"}}},{"node":{"id":"7b77461b-7632-57fa-ae82-674d2e5873ec","fields":{"slug":"/2021-12-07-sorting-algorithm/"},"frontmatter":{"title":"[algorithm] 정렬 알고리즘 - 버블, 삽입, 선택, 병합, 퀵"}}},{"node":{"id":"b8d3db01-c9d0-5533-bce9-4852ce246694","fields":{"slug":"/2021-12-12-gaysby/"},"frontmatter":{"title":"[gatsby] gaysby로 TIL만들기"}}},{"node":{"id":"9a40e149-1d55-55e8-9377-47d54cf324d6","fields":{"slug":"/2021-12-14-codility/"},"frontmatter":{"title":"[algorithm] Codility Lesson 4. MissingInteger"}}},{"node":{"id":"82820512-6ca7-5276-a5b3-1325a39344d1","fields":{"slug":"/2021-12-22-react-redux-persist/"},"frontmatter":{"title":"[react] react프로젝트에 redux-persist 적용하기"}}},{"node":{"id":"f29620f6-3bd9-56eb-8239-a31f00b3363d","fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}}},{"node":{"id":"c056e9c2-9b42-5395-885a-63f763406f36","fields":{"slug":"/2022-01-27-styled-components/"},"frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기"}}},{"node":{"id":"41c02eb7-f88d-5bd8-a3cf-593a93056f95","fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},{"node":{"id":"6a9e7416-f1ad-5ac8-97a1-f94e647cd5fa","fields":{"slug":"/2022-02-18-react/"},"frontmatter":{"title":"[react] CRA없이 React환경 구축하기 (웹팩, 바벨)"}}},{"node":{"id":"527df9ef-44b6-5e3b-9249-2b2b3fa1ac1c","fields":{"slug":"/2022-03-03-react-modal/"},"frontmatter":{"title":"[react] transition이 적용된 Modal 만들기"}}},{"node":{"id":"2f8812c5-dbf6-582e-9d44-51f2023d3b4c","fields":{"slug":"/2022-04-05-react/"},"frontmatter":{"title":"[react] react 코딩 컨벤션"}}},{"node":{"id":"da92f528-b51e-5054-87c5-1f36cec6a97b","fields":{"slug":"/2022-03-09/"},"frontmatter":{"title":"[diary] 프론트엔드 신입 면접 준비하기"}}},{"node":{"id":"b8e04d5f-aab0-5c87-bdd0-7fd3bea4b241","fields":{"slug":"/2022-04-25-git-basic/"},"frontmatter":{"title":"[git] git 기본 사용법"}}},{"node":{"id":"fcdfde95-211e-5fae-b419-b798b39c230d","fields":{"slug":"/2022-04-25-browsers-repository/"},"frontmatter":{"title":"[web] Storage vs Cookie"}}},{"node":{"id":"d1e364e6-edec-506d-b919-41d02b91b667","fields":{"slug":"/2022-04-25-redux-saga/"},"frontmatter":{"title":"[redux] Redux Saga"}}},{"node":{"id":"cabe57d4-a242-5b13-82b0-43ed5458cd03","fields":{"slug":"/2022-04-25-hooks/"},"frontmatter":{"title":"[react] React Hooks (리액트 훅스)"}}},{"node":{"id":"f7ae8bd6-d30a-52ea-bc25-4cb6dd900280","fields":{"slug":"/2022-04-25-virtual-dom/"},"frontmatter":{"title":"[react] Virtual Dom (가상 돔)"}}},{"node":{"id":"8f80827a-ba2b-55b7-9ed1-148827c19873","fields":{"slug":"/2022-04-25-async-await/"},"frontmatter":{"title":"[javascript] Async await"}}},{"node":{"id":"02581db7-7b59-5b5b-ad64-5b7f093151cd","fields":{"slug":"/2022-04-25-js-runtime/"},"frontmatter":{"title":"[javascript] 자바스크립트 런타임"}}},{"node":{"id":"3b3084d4-9cdc-5003-8eb6-7449b17bb244","fields":{"slug":"/2022-04-25-promise/"},"frontmatter":{"title":"[javascript] Promise"}}},{"node":{"id":"633854f2-750f-5d46-b542-65323e325c47","fields":{"slug":"/2022-04-25-throttle-debounce/"},"frontmatter":{"title":"[javascript] throttling과 debouncing"}}},{"node":{"id":"45b950b8-83ca-561c-832d-103769b353a1","fields":{"slug":"/2022-04-25-url-web/"},"frontmatter":{"title":"[web] 브라우저에 URL을 입력했을 때 발생하는 일들"}}},{"node":{"id":"9e551fd8-ac87-5bf1-b009-76368e5d010e","fields":{"slug":"/2022-06-12/"},"frontmatter":{"title":"[diary] 성장하는 개발자"}}},{"node":{"id":"8250c92a-0f9d-5c47-be28-9cb616399585","fields":{"slug":"/2022-08-06-react-query/"},"frontmatter":{"title":"[react] React Query 기초"}}},{"node":{"id":"0282216d-5c95-5f37-b0d3-75173c2d0f02","fields":{"slug":"/2022-08-15-recoil/"},"frontmatter":{"title":"[react] Recoil 상태관리 라이브러리"}}},{"node":{"id":"4cf7e012-6c31-5681-a23e-f451f55f9ef3","fields":{"slug":"/2022-11-06-nextjs-13/"},"frontmatter":{"title":"[nextjs] Next.js 13"}}},{"node":{"id":"9cedfe8b-a05b-5bb1-b717-3b12ebae6193","fields":{"slug":"/2023-01-08/"},"frontmatter":{"title":"[diary] 2022년 회고"}}},{"node":{"id":"7571a5e0-4bbc-5824-9acf-d483240a8a69","fields":{"slug":"/2023-01-23-array-to-object/"},"frontmatter":{"title":"[javascript] 배열에서 특정값을 선택해서 객체로 변환하기 (배열을 객체로)"}}},{"node":{"id":"22dc2db7-3b64-579b-ab94-a1f2e27de264","fields":{"slug":"/2023-03-03-git/"},"frontmatter":{"title":"[git] 실무에서 사용했던 git 정리"}}},{"node":{"id":"2c4d88b2-d6fa-5445-949e-5764e2226ca5","fields":{"slug":"/2023-08-15-vercel-node-version-update/"},"frontmatter":{"title":"[nextjs] nextjs node버전 업데이트 여정 (tailwind custom class error)"}}},{"node":{"id":"3c536648-1dae-55d5-8a0a-4dd5655f02be","fields":{"slug":"/2023-12-11-npm-install/"},"frontmatter":{"title":"[npm/yarn] 한 프로젝트에서 같은 라이브러리 다른 버전 설치하기"}}}]},"previous":{"fields":{"slug":"/2021-09-21-sematic-tag/"},"frontmatter":{"title":"[html] Semantic Tag Layout (시맨틱 태그)"}},"next":{"fields":{"slug":"/2021-09-21-rwd-awd/"},"frontmatter":{"title":"[web] 반응형(RWD)웹과 적응형(AWD)웹"}}},"pageContext":{"id":"0cf44020-e73b-5d81-97ab-eb71a6a2f774","series":null,"previousPostId":"86892888-c819-59c7-a91e-8dba2c018aa3","nextPostId":"87f26728-3fd2-5307-914c-b108135a8fdd"}},"staticQueryHashes":[],"slicesMap":{}}