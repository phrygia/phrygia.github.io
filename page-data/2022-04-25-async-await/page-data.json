{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-04-25-async-await/","result":{"data":{"site":{"siteMetadata":{"title":"phrygia dev.log"}},"markdownRemark":{"id":"8f80827a-ba2b-55b7-9ed1-148827c19873","excerpt":"async/await는 ES8에서 채택되었으며 제너레이터보다 간단하고 가독성 좋게 비동기 처리를 동기처럼 동작하도록 구현할 수 있다. \n프로미스를 기반으로 동작하며 프로미스의 then/catch/finally 후속 처리 메서드에 콜백 함수를 전달해서 비동기 처리 결과를 후속 처리할 필요 없이 마치 동기 처리처럼 프로미스가 처리 결과를 반환하도록 구현할 수…","html":"<p>async/await는 ES8에서 채택되었으며 제너레이터보다 간단하고 가독성 좋게 비동기 처리를 동기처럼 동작하도록 구현할 수 있다. <br>\n프로미스를 기반으로 동작하며 프로미스의 then/catch/finally 후속 처리 메서드에 콜백 함수를 전달해서 비동기 처리 결과를 후속 처리할 필요 없이 마치 동기 처리처럼 프로미스가 처리 결과를 반환하도록 구현할 수 있다.</p>\n<h2>제너레이터 (Generator)</h2>\n<p>Es6에서 도입된 제너레이터는 코드 블록의 실행을 일시 중지시켰다가 필요한 시점에 재개할 수 있는 특수한 함수다. <br>\n제너레이터는 이터레이터를 발생시키는 함수로 사용되면 function* 키워드로 선언한다. <br>\n제너레이터 함수는 화살표 함수로 정의하 수없으며 new 연산자와 함께 생성자 함수로 호출할 수 없다. <br>\n<strong>*이터레이터(iterator)?</strong> {value, done} 객체를 리턴하는 next()를 가진 값 <br></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 제너레이터 함수 선언문</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 제너레이터 메서드</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">genObjMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 제너레이터 클래스 메서드</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GenClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">genClsMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>*제너레이터 vs 일반함수</h3>\n<ol>\n<li><strong>제너레이터 함수는 함수 호출자에게 함수 실행의 제어권을 양도할 수 있다.</strong> <br>\n일반 함수를 호출하면 제어권이 함수에게 넘어가고 함수 코드를 일괄 실행한다. (호출 이후 함수 실행을 제어할 수 없다.)<br>\n제너레이터 함수는 함수 실행을 함수 호출자가 제어할 수 있다. (함수 제어권을 호출자에게 양도 할 수 있다.)</li>\n<li><strong>제너레이터 함수는 함수 호출자와 함수의 상태를 주고 받을 수 있다.</strong> <br>\n일반함수는 함수가 실행되고 있는 동안에는 함수 외부에서 함수 내부로 값을 전달하여 함수의 상태를 변경할 수 없다.<br>\n제너레이터 함수는 함수 호출자에게 상태를 전달할 수 있고 함수 호출자로부터 양방향으로 상태를 전달받을 수도 있다.</li>\n<li><strong>제너레이터 함수를 호출하면 제너레이터 객체를 반환한다.</strong>\n일반 함수를 호출하면 함수 코드를 일관 실행하고 값을 반환한다.<br>\n제너레이터 함수를 호출하면 함수 코드를 실행하는 것이 아니라 이터러블이면서 동시에 이터레이터인 제너레이터 객체를 반환한다.</li>\n</ol>\n<p><strong>*이터러블(iterable)?</strong> iterator를 리턴하는 [Symbol.iterator]() 를 가진 값 <br>*비동기 처리를 동기처리처럼 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 제너레이터 실행기</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">async</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">generatorFunc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">generatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onResolved</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>done\n      <span class=\"token operator\">?</span> result<span class=\"token punctuation\">.</span>value\n      <span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">onResolved</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> onResolve\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://jsonplaceholder.typicode.com/todos/1\"</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// {userId: 1, id: 1, title: 'delecus aut autem', completed: false}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>async/await</h2>\n<p>제너레이터를 사용해서 비동기 처리를 동기 처리처럼 동작하도록 구현했지만 코드가 장황해지고 가독성이 나쁘다. 이는 async/await를 사용하면 해결할 수 있다.</p>\n<h3>async 함수</h3>\n<p>await 키워드는 반드시 async 함수 내부에서 사용해야 한다. async 함수는 언제나 프로미스를 반환한다. async 함수가 명시적으로 프로미스를 반환하지 않더라도 async 함수는 암묵적으로 반환값을 resolve하는 프로미스를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// async 함수 선언문</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> conole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// async 함수 표현식</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> conole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// async 화살표 함수</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// async 메서드</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n\n<span class=\"token comment\">// async 클래스 메서드</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyClass<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> conole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>클래스의 constructor 메서드는 async 메서드가 될 수 없다. 클래스의 constructor 메서드는 인스턴스를 반환해야 하지만 async 함수는 언제나 프로미스를 반환해야 한다. <br><br></p>\n<h3>await 키워드</h3>\n<p>await 키워드는 프로미스가 settled 상태(비동기처리가 수행된 상태)가 될 때까지 대기하다가 settled 상태가 되면 프로미스가 resolve한 처리 결과를 반환한다. await 키워드는 반드시 프로미스 앞에서 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getGithubUserName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fetch 함수가 수행한 HTTP 요청에 대한 서버의 응답이 도책해서 반환된 프로미스가 settled 상태가 될때까지 대기</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.github.com/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 이후 프로미스가 settled 상태가 되면 프로미스가 resolve한 처리 결과가 res 변수에 할당된다.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getGithubUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phrygia\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6초 소요</span></code></pre></div>\n<h3>에러 처리</h3>\n<p>비동기 처리를 위한 콜백 패턴의 단점 중 가장 심각한 것은 에러 처리가 곤란하다는 것이다. 하지만 async/await는 try...catch문을 사용할 수 있다. 콜백 함수를 인수로 전달받는 비동기 함수와는 달리 프로미스를 반환하는 비동기 함수는 명시적으로 호출할 수 있다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wrongUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://wrong.url\"</span>\n\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>wrongUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>async 함수 내에서 catch 문을 사용해서 에러 처리를 하지 않으면 async 함수는 발생한 에러를 reject하는 프로미스를 반환한다.</strong> 따라서 async 함수를 호출하고 Promise.prototype.catch 후속 처리 메서드를 사용해 에러를 캐치할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> wrongUrl  <span class=\"token operator\">=</span> <span class=\"token string\">\"https://wrong.url\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>wrongUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>에러 처리의 필요성</h4>\n<p>에러가 발생하지 않는 코드를 작성하는 것은 불가능하다. 따라서 에러는 언제나 발생할 수 있다. 발생한 에러에 대해 대처하지 않고 방치하면 프로그램은 강제 종료된다. <br>\ntry/catch 문을 사용해 발생한 에러에 적절하게 대응하면 프로그램이 강제 종료되지 않고 계속해서 코드를 실행시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 에러 발생상황</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Start]\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: foo is not defined</span>\n<span class=\"token comment\">// 에러에 의해 프로그램이 강제 종료된다.</span>\n\n<span class=\"token comment\">// 프로그램의 종료로 인해 End는 출력되지 않는다.</span>\ncosnole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[End]\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2. try/catch</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Start]\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[에러 발생]\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// [에러 발생] ReferenceError: foo is not defined</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 발생한 에러에 적절한 대응을 하면 프로그램이 강제 종료되지 않는다.</span>\ncosnole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[End]\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 3. DOM에 button 요소가 존재하지 않으면 querySelector 메서드는 에러를 발생시키지 않고 null을 반환한다.</span>\n<span class=\"token keyword\">const</span> $button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n\n<span class=\"token comment\">// 옵셔널 체이닝 연산자 (?.)를 사용하지 않으면 TypeError가 발생한다.</span>\n$button<span class=\"token operator\">?.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disabled\"</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"[javascript] Async await","date":"April 25, 2022","update":null,"tags":["javascript"],"series":null},"fields":{"slug":"/2022-04-25-async-await/","readingTime":{"minutes":9.56}}},"seriesList":{"edges":[{"node":{"id":"a49ba7fe-2298-5593-99e5-fc94628ca08c","fields":{"slug":"/2021-09-21-vue-clap-button/"},"frontmatter":{"title":"[vue] 박수치기 버튼 만들기 (vue clap button)"}}},{"node":{"id":"86892888-c819-59c7-a91e-8dba2c018aa3","fields":{"slug":"/2021-09-21-sematic-tag/"},"frontmatter":{"title":"[html] Semantic Tag Layout (시맨틱 태그)"}}},{"node":{"id":"0cf44020-e73b-5d81-97ab-eb71a6a2f774","fields":{"slug":"/2021-09-21-javascript-object/"},"frontmatter":{"title":"[javascript] 객체 수정 제어 : preventExtensions(), seal(), freeze()"}}},{"node":{"id":"87f26728-3fd2-5307-914c-b108135a8fdd","fields":{"slug":"/2021-09-21-rwd-awd/"},"frontmatter":{"title":"[web] 반응형(RWD)웹과 적응형(AWD)웹"}}},{"node":{"id":"e5af2a5d-1fa4-5015-b69d-d3df92d26d5c","fields":{"slug":"/2021-09-21-react-modal/"},"frontmatter":{"title":"[react] 모달 팝업창 만들기 (react modal)"}}},{"node":{"id":"e4a5dcd7-3dab-593f-832d-c6d0b249a7f6","fields":{"slug":"/2021-09-21-function-prototype/"},"frontmatter":{"title":"[javascript] 함수의 call, apply, bind 메서드"}}},{"node":{"id":"5f56739f-415e-566a-9e1b-e5b385ba25d3","fields":{"slug":"/2021-09-21-scroll/"},"frontmatter":{"title":"[html] 특정 영역으로 스크롤 이동 - 앵커기능(anchor) vs data 속성"}}},{"node":{"id":"a038fa37-3752-59b0-83e1-77252e300845","fields":{"slug":"/2021-09-21-object/"},"frontmatter":{"title":"[javascript] Object.assign() & Object.create()"}}},{"node":{"id":"9cc5e665-eee9-55ba-bc71-f83945e975df","fields":{"slug":"/2021-09-21-scope/"},"frontmatter":{"title":"[javascript] execution context, scope (실행 컨텍스트, 스코프)"}}},{"node":{"id":"d1fa176c-5bf0-5be0-a723-0b08fc3de5d1","fields":{"slug":"/2021-09-21-hoisting/"},"frontmatter":{"title":"[javascript] hoisting (호이스팅)"}}},{"node":{"id":"327dc0b1-3014-5570-8752-54a472ce4dcb","fields":{"slug":"/2021-09-21-closure/"},"frontmatter":{"title":"[javascript] closure (클로저)"}}},{"node":{"id":"cdaec2e2-37a5-515e-85f9-3cc8150d62b5","fields":{"slug":"/2021-10-26-gaysby/"},"frontmatter":{"title":"[gatsby] Google Search Console과 Analytics 추가하기"}}},{"node":{"id":"d39b84bd-dd38-56db-ae71-e1536a6f66bb","fields":{"slug":"/2021-10-27-react-firebase/"},"frontmatter":{"title":"[react] firebase 프로젝트 배포하기"}}},{"node":{"id":"39469573-8887-50f5-959e-048e8fbac3d9","fields":{"slug":"/2021-10-30-var-let-const/"},"frontmatter":{"title":"[javascript] var, let, const"}}},{"node":{"id":"1d0b228b-a81b-5692-96b9-876668a4bb8d","fields":{"slug":"/2021-11-09-algorithm/"},"frontmatter":{"title":"[algorithm] 약수, 소수, 최대공약수, 최소공배수"}}},{"node":{"id":"11a3e5c7-dd76-5f0a-95ac-eef303421178","fields":{"slug":"/2021-11-25-mui-react/"},"frontmatter":{"title":"[react] Material ui 템플릿 (Mui) 으로 회원가입 페이지 만들기 "}}},{"node":{"id":"66c4b29a-927c-5d55-b1b5-9c3f8a2e08ea","fields":{"slug":"/2021-11-28-algorithm/"},"frontmatter":{"title":"[algorithm] LeetCode 139. Word Break "}}},{"node":{"id":"b0ff1b19-b212-5308-a03d-549609b1cbf5","fields":{"slug":"/2021-12-02-bigO/"},"frontmatter":{"title":"[algorithm] 자바스크립트 빅오 표기법 (Big-O)"}}},{"node":{"id":"7b77461b-7632-57fa-ae82-674d2e5873ec","fields":{"slug":"/2021-12-07-sorting-algorithm/"},"frontmatter":{"title":"[algorithm] 정렬 알고리즘 - 버블, 삽입, 선택, 병합, 퀵"}}},{"node":{"id":"b8d3db01-c9d0-5533-bce9-4852ce246694","fields":{"slug":"/2021-12-12-gaysby/"},"frontmatter":{"title":"[gatsby] gaysby로 TIL만들기"}}},{"node":{"id":"9a40e149-1d55-55e8-9377-47d54cf324d6","fields":{"slug":"/2021-12-14-codility/"},"frontmatter":{"title":"[algorithm] Codility Lesson 4. MissingInteger"}}},{"node":{"id":"82820512-6ca7-5276-a5b3-1325a39344d1","fields":{"slug":"/2021-12-22-react-redux-persist/"},"frontmatter":{"title":"[react] react프로젝트에 redux-persist 적용하기"}}},{"node":{"id":"f29620f6-3bd9-56eb-8239-a31f00b3363d","fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}}},{"node":{"id":"c056e9c2-9b42-5395-885a-63f763406f36","fields":{"slug":"/2022-01-27-styled-components/"},"frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기"}}},{"node":{"id":"41c02eb7-f88d-5bd8-a3cf-593a93056f95","fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},{"node":{"id":"6a9e7416-f1ad-5ac8-97a1-f94e647cd5fa","fields":{"slug":"/2022-02-18-react/"},"frontmatter":{"title":"[react] CRA없이 React환경 구축하기 (웹팩, 바벨)"}}},{"node":{"id":"527df9ef-44b6-5e3b-9249-2b2b3fa1ac1c","fields":{"slug":"/2022-03-03-react-modal/"},"frontmatter":{"title":"[react] transition이 적용된 Modal 만들기"}}},{"node":{"id":"2f8812c5-dbf6-582e-9d44-51f2023d3b4c","fields":{"slug":"/2022-04-05-react/"},"frontmatter":{"title":"[react] react 코딩 컨벤션"}}},{"node":{"id":"da92f528-b51e-5054-87c5-1f36cec6a97b","fields":{"slug":"/2022-03-09/"},"frontmatter":{"title":"[diary] 프론트엔드 신입 면접 준비하기"}}},{"node":{"id":"b8e04d5f-aab0-5c87-bdd0-7fd3bea4b241","fields":{"slug":"/2022-04-25-git-basic/"},"frontmatter":{"title":"[git] git 기본 사용법"}}},{"node":{"id":"fcdfde95-211e-5fae-b419-b798b39c230d","fields":{"slug":"/2022-04-25-browsers-repository/"},"frontmatter":{"title":"[web] Storage vs Cookie"}}},{"node":{"id":"d1e364e6-edec-506d-b919-41d02b91b667","fields":{"slug":"/2022-04-25-redux-saga/"},"frontmatter":{"title":"[redux] Redux Saga"}}},{"node":{"id":"cabe57d4-a242-5b13-82b0-43ed5458cd03","fields":{"slug":"/2022-04-25-hooks/"},"frontmatter":{"title":"[react] React Hooks (리액트 훅스)"}}},{"node":{"id":"f7ae8bd6-d30a-52ea-bc25-4cb6dd900280","fields":{"slug":"/2022-04-25-virtual-dom/"},"frontmatter":{"title":"[react] Virtual Dom (가상 돔)"}}},{"node":{"id":"8f80827a-ba2b-55b7-9ed1-148827c19873","fields":{"slug":"/2022-04-25-async-await/"},"frontmatter":{"title":"[javascript] Async await"}}},{"node":{"id":"02581db7-7b59-5b5b-ad64-5b7f093151cd","fields":{"slug":"/2022-04-25-js-runtime/"},"frontmatter":{"title":"[javascript] 자바스크립트 런타임"}}},{"node":{"id":"3b3084d4-9cdc-5003-8eb6-7449b17bb244","fields":{"slug":"/2022-04-25-promise/"},"frontmatter":{"title":"[javascript] Promise"}}},{"node":{"id":"633854f2-750f-5d46-b542-65323e325c47","fields":{"slug":"/2022-04-25-throttle-debounce/"},"frontmatter":{"title":"[javascript] throttling과 debouncing"}}},{"node":{"id":"45b950b8-83ca-561c-832d-103769b353a1","fields":{"slug":"/2022-04-25-url-web/"},"frontmatter":{"title":"[web] 브라우저에 URL을 입력했을 때 발생하는 일들"}}},{"node":{"id":"9e551fd8-ac87-5bf1-b009-76368e5d010e","fields":{"slug":"/2022-06-12/"},"frontmatter":{"title":"[diary] 성장하는 개발자"}}},{"node":{"id":"8250c92a-0f9d-5c47-be28-9cb616399585","fields":{"slug":"/2022-08-06-react-query/"},"frontmatter":{"title":"[react] React Query 기초"}}},{"node":{"id":"0282216d-5c95-5f37-b0d3-75173c2d0f02","fields":{"slug":"/2022-08-15-recoil/"},"frontmatter":{"title":"[react] Recoil 상태관리 라이브러리"}}},{"node":{"id":"4cf7e012-6c31-5681-a23e-f451f55f9ef3","fields":{"slug":"/2022-11-06-nextjs-13/"},"frontmatter":{"title":"[nextjs] Next.js 13"}}},{"node":{"id":"9cedfe8b-a05b-5bb1-b717-3b12ebae6193","fields":{"slug":"/2023-01-08/"},"frontmatter":{"title":"[diary] 2022년 회고"}}},{"node":{"id":"7571a5e0-4bbc-5824-9acf-d483240a8a69","fields":{"slug":"/2023-01-23-array-to-object/"},"frontmatter":{"title":"[javascript] 배열에서 특정값을 선택해서 객체로 변환하기 (배열을 객체로)"}}},{"node":{"id":"22dc2db7-3b64-579b-ab94-a1f2e27de264","fields":{"slug":"/2023-03-03-git/"},"frontmatter":{"title":"[git] 실무에서 사용했던 git 정리"}}},{"node":{"id":"2c4d88b2-d6fa-5445-949e-5764e2226ca5","fields":{"slug":"/2023-08-15-vercel-node-version-update/"},"frontmatter":{"title":"[nextjs] nextjs node버전 업데이트 여정 (tailwind custom class error)"}}},{"node":{"id":"3c536648-1dae-55d5-8a0a-4dd5655f02be","fields":{"slug":"/2023-12-11-npm-install/"},"frontmatter":{"title":"[npm/yarn] 한 프로젝트에서 같은 라이브러리 다른 버전 설치하기"}}}]},"previous":{"fields":{"slug":"/2022-04-25-virtual-dom/"},"frontmatter":{"title":"[react] Virtual Dom (가상 돔)"}},"next":{"fields":{"slug":"/2022-04-25-js-runtime/"},"frontmatter":{"title":"[javascript] 자바스크립트 런타임"}}},"pageContext":{"id":"8f80827a-ba2b-55b7-9ed1-148827c19873","series":null,"previousPostId":"f7ae8bd6-d30a-52ea-bc25-4cb6dd900280","nextPostId":"02581db7-7b59-5b5b-ad64-5b7f093151cd"}},"staticQueryHashes":[],"slicesMap":{}}