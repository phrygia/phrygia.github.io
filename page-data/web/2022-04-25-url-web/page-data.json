{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/web/2022-04-25-url-web/",
    "result": {"data":{"cur":{"id":"b1f65674-309b-5bf6-8092-aae68afe1bb3","html":"<p>주소창에 URL을 입력하면,</p>\n<ol>\n<li><strong>DNS 서버 검색</strong> <br>\r\n브라우저는 DNS(Domain Name System)를 운영하는 서버를 통해 서버의 실제 주소인 IP 주소를 요청한다. 매핑되는 IP 주소가 있다면 사용자가 입력한 URL 정보와 함께 전달한다.<br><br></li>\n<li><strong>브라우저는 IP 주소를 이용해서 서버에 요청을 보낸다.</strong> <br>\r\n페이지 URL 정보와 전달받은 IP 주소는 HTTP 프로토콜을 사용하여 HTTP 요청 메시지를 생성하고, 이렇게 생성된 HTTP 요청 메시지는 TCP 프로토콜을 사용하여 인터넷을 거쳐 해당 IP 주소의 컴퓨터로 전송된다. 이렇게 도착한 HTTP 요청 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 URL 정보로 변환되어 웹 페이지 URL 정보에 해당하는 데이터를 검색한다.<br><br></li>\n<li><strong>서버는 요청에 대한 응답을 보내준다.</strong> <br>\r\n검색된 웹 페이지 데이터는 또 다시 HTTP 프로토콜을 사용하여 HTTP 응답 메시지를 생성하고 TCP 프로토콜을 사용하여 인터넷을 거쳐 원래 컴퓨터로 전송된다.<br><br></li>\n<li><strong>브라우저는 응답 결과를 렌더링 한다.</strong><br>\r\n도착한 HTTP 응답 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 데이터로 변환되어 웹 브라우저에 의해 출력되어 사용자가 볼 수 있게 된다.</li>\n</ol>\n<p><br><br></p>\n<img src=\"https://media.vlpt.us/images/woo0_hooo/post/e119383c-61cc-46d5-a85d-b27b65ddee1e/Untitled.png\">\n<br>\n<div class=\"from add\">\r\n    <ul>\r\n        <li>- 내용참고: <a href=\"https://sophia2730.tistory.com/entry/DNS-주소창에-wwwnavercom을-치면-일어나는-일\" tearget=\"_blank\">https://sophia2730.tistory.com/entry/DNS-주소창에-wwwnavercom을-치면-일어나는-일</a></li>\r\n        <li>- 사진출처: <a href=\"https://velog.io/@woo0_hooo/네트워크-웹-통신의-흐름\" target=\"_blank\">https://velog.io/@woo0_hooo/네트워크-웹-통신의-흐름</a></li>\r\n    </ul>\r\n</div>\n<br>","excerpt":"주소창에 URL을 입력하면, DNS 서버 검색 \r\n브라우저는 DNS(Domain Name System)를 운영하는 서버를 통해 서버의 실제 주소인 IP 주소를 요청한다. 매핑되는 IP 주소가 있다면 사용자가 입력한 URL 정보와 함께 전달한다. 브라우저는 IP 주소를 이용해서 서버에 요청을 보낸다. \r\n페이지 URL 정보와 전달받은 IP 주소는 HTTP 프로토콜을 사용하여 HTTP 요청 메시지를 생성하고, 이렇게 생성된 HTTP 요청 메시지는 TCP 프로토콜을 사용하여 인터넷을 거쳐 해당 IP 주소의 컴퓨터로 전송된다. 이렇게 도착한 HTTP 요청 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 URL 정보로 변환되어 웹 페이지 URL 정보에 해당하는 데이터를 검색한다. 서버는 요청에 대한 응답을 보내준다. \r\n검색된 웹 페이지 데이터는 또 다시 HTTP 프로토콜을 사용하여 HTTP 응답 메시지를 생성하고 TCP 프로토콜을 사용하여 인터넷을 거쳐 원래 컴퓨터로 전송된다. 브라우저는…","frontmatter":{"date":"April 25, 2022","title":"[web] 브라우저에 URL을 입력했을 때 발생하는 일들","categories":"web","author":"phrygia","emoji":"📓"},"fields":{"slug":"/web/2022-04-25-url-web/"}},"next":{"id":"9992feb3-50e0-5cdf-adc1-f835beef30c8","html":"<p>Redux의 미들웨어 라이브러리 중 한 개로 Redux-thunk, Redux-toolkit 등 다양한 라이브러리가 존재하지만 Redux-saga를 사용하는 기업이 많다. <br>\r\nRedux-saga는 다른 라이브러리에 비해 더 복잡한 비동기 처리를 할 수 있다는 장점이 있다. <br>\r\n단점은 러닝커브가 높고 제네레이터라는 문법에 익숙하지 않다면 어색하게 느껴 질 수 있다. 또한 코드가 길어져 복잡해질 수 있다. <br>\r\n(최근엔 toolkit도 많이 쓰이며 saga의 기능을 설치하여 연동 가능하다고 하니 toolkit도 공부하면 좋을 것 같다.)\r\n<br><br></p>\n<h2 id=\"선수지식---제너레이터-generator\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%88%98%EC%A7%80%EC%8B%9D---%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-generator\" aria-label=\"선수지식   제너레이터 generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선수지식 - 제너레이터 (Generator)</h2>\n<ul>\n<li>함수에 *를 붙이고, yield라는 문법을 사용</li>\n<li>next()를 이용하여 다음 yield를 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> gener <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">gener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\r\n<span class=\"token function\">gener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\r\n<span class=\"token function\">gener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\r\n<span class=\"token function\">gener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undifined</span></code></pre></div>\n<br>\n<h2 id=\"redux-saga-주요-effects\" style=\"position:relative;\"><a href=\"#redux-saga-%EC%A3%BC%EC%9A%94-effects\" aria-label=\"redux saga 주요 effects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux-saga 주요 Effects</h2>\n<h3 id=\"1-fork\" style=\"position:relative;\"><a href=\"#1-fork\" aria-label=\"1 fork permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. fork</h3>\n<p><code class=\"language-text\">fork</code>는 함수의 비동기적인 호출을 할 때 사용하며 순서 상관없이 실행할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">cartSagas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>watchCartList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>watchAddToCart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>watchIncrementItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>watchDecrementItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>watchRemoveItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"2-call\" style=\"position:relative;\"><a href=\"#2-call\" aria-label=\"2 call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. call</h3>\n<p><code class=\"language-text\">call</code>은 동기 실행을 보장하며 순서대로 함수를 실행해야하는 API 요청 같은 곳에 사용한다. <br>\r\n함수의 첫 번째 파라미터는 함수, 나머지 파라미터는 해당 함수에 넣을 인수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 장바구니 상품 조회</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cartListAPI</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/cart-items</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\r\n    headers<span class=\"token operator\">:</span> header<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> payload<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">cartList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>cartListAPI<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      type<span class=\"token operator\">:</span> <span class=\"token constant\">CART_LIST_SUCCESS</span><span class=\"token punctuation\">,</span>\r\n      payload<span class=\"token operator\">:</span> json<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      type<span class=\"token operator\">:</span> <span class=\"token constant\">FAILURE</span><span class=\"token punctuation\">,</span>\r\n      payload<span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">watchCartList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CART_LIST_REQUEST</span><span class=\"token punctuation\">,</span> cartList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"3-put\" style=\"position:relative;\"><a href=\"#3-put\" aria-label=\"3 put permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. put</h3>\n<p>특정 액션을 dispatch하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">loadComments</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>loadCommentsAPI<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      type<span class=\"token operator\">:</span> <span class=\"token constant\">COMMENT_LOADING_SUCCESS</span><span class=\"token punctuation\">,</span>\r\n      payload<span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      type<span class=\"token operator\">:</span> <span class=\"token constant\">COMMENT_LOADING_FAILURE</span><span class=\"token punctuation\">,</span>\r\n      payload<span class=\"token operator\">:</span> e<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"4-takeevery\" style=\"position:relative;\"><a href=\"#4-takeevery\" aria-label=\"4 takeevery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. takeEvery</h3>\n<p><code class=\"language-text\">takeEvery</code>는 모든 액션에 대해 특정 작업을 처리해준다. <br>\r\nwhile(true)로 감싸는 효과가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">watchLoadComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeEvery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">COMMENT_LOADING_REQUEST</span><span class=\"token punctuation\">,</span> loadComments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// → 들어오는 모든 COMMENT_LOADING_REQUEST 액션에 대해 loadComments 함수 실행</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"5-takelatest\" style=\"position:relative;\"><a href=\"#5-takelatest\" aria-label=\"5 takelatest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. takeLatest</h3>\n<p>같은 종류의 액션이 여러 번 요청된다면 취소 처리하고 가장 마지막 액션 작업만 수행된다.</p>\n<ul>\n<li><code class=\"language-text\">takeEvery</code>는 모든 액션을 처리하고 <code class=\"language-text\">takeLatest</code> 가장 마지막 액션만 처리</li>\n<li>ex) 특정 버튼을 여러 번 클릭하는 경우에 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">watchCartList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CART_LIST_REQUEST</span><span class=\"token punctuation\">,</span> cartList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// → 들어오는 모든 CART_LIST_REQUEST 액션에서 가장 마지막 cartList 함수 실행</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"6-delay\" style=\"position:relative;\"><a href=\"#6-delay\" aria-label=\"6 delay permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. delay</h3>\n<p>설정된 시간 이후에 resolve 하는 Promise 객체를 리턴한다. <br>\r\n보통 일정 시간 후 다음 함수 단계 실행하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">upLoadComments</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>upLoadCommentsAPI<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1초 후 COMMENT_UPLOADING_SUCCESS 액션 실행</span>\r\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      type<span class=\"token operator\">:</span> <span class=\"token constant\">COMMENT_UPLOADING_SUCCESS</span><span class=\"token punctuation\">,</span>\r\n      payload<span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<div class=\"from add\">\r\n    <ul>\r\n        <li>- 참고: <a href=\"https://kyounghwan01.github.io/blog/React/redux/redux-saga/#%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB-%E1%84%8B%E1%85%B5%E1%84%8B%E1%85%B2\" tearget=\"_blank\">https://kyounghwan01.github.io/blog/React/redux/redux-saga/#사용하는-이유</a></li>\r\n    </ul>\r\n</div>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%A0%EC%88%98%EC%A7%80%EC%8B%9D---%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-generator\">선수지식 - 제너레이터 (Generator)</a></p>\n</li>\n<li>\n<p><a href=\"#redux-saga-%EC%A3%BC%EC%9A%94-effects\">Redux-saga 주요 Effects</a></p>\n<ul>\n<li><a href=\"#1-fork\">1. fork</a></li>\n<li><a href=\"#2-call\">2. call</a></li>\n<li><a href=\"#3-put\">3. put</a></li>\n<li><a href=\"#4-takeevery\">4. takeEvery</a></li>\n<li><a href=\"#5-takelatest\">5. takeLatest</a></li>\n<li><a href=\"#6-delay\">6. delay</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 25, 2022","title":"[redux] Redux Saga","categories":"redux","author":"phrygia","emoji":"📓"},"fields":{"slug":"/redux/2022-04-25-redux-saga/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://phrygia.github.io","comments":{"utterances":{"repo":"phrygia/blog-comments"}}}}},"pageContext":{"slug":"/web/2022-04-25-url-web/","nextSlug":"/redux/2022-04-25-redux-saga/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}