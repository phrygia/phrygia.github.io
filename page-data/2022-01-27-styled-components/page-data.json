{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-01-27-styled-components/","result":{"data":{"site":{"siteMetadata":{"title":"phrygia dev.log"}},"markdownRemark":{"id":"69f9000b-b802-52f7-972c-8a3c063d77f5","excerpt":"react를 배우던 초창기에는 를 일일히 써주면서 코딩했던 기억이 있다. \n사이드 프로젝트에서 styled-components를 사용하고 있는데 저 코드를 일일히 썼을 때 디자이너분이 사이즈의 기준을 바꾸거나 하 코딩한 모든 컴포넌트를 수정해야 한다. \nreact로 여러가지 개인 프로젝트나 팀 프로젝트를 진행해보았기 때문에 저런 하드코딩적인 느낌을 지우고…","html":"<p>react를 배우던 초창기에는 <code class=\"language-text\">@media (min-width: 768px) {} @media (max-width: 767px) {}</code>를 일일히 써주면서 코딩했던 기억이 있다. <br>\n사이드 프로젝트에서 styled-components를 사용하고 있는데 저 코드를 일일히 썼을 때 디자이너분이 사이즈의 기준을 바꾸거나 하 코딩한 모든 컴포넌트를 수정해야 한다. <br>\nreact로 여러가지 개인 프로젝트나 팀 프로젝트를 진행해보았기 때문에 저런 하드코딩적인 느낌을 지우고 싶었다. <br>\nstyled-components에는 <code class=\"language-text\">ThemeProvider</code>라는 속성을 사용해 공통으로 스타일을 관리해 줄 수 있다고 한다.</p>\n<h2>ThemeProvider</h2>\n<p>Context API를 기반으로 작동하기 때문에 ThemeProvider로 감싸진 모든 하위 컴포넌트들은 전달받은 theme를 props로 사용할 수 있다.<br> *특히 color사용에 좋다 → 프로젝트를 진행하면서 메인컬러가 바뀌는 경우가 있는데 모든 컴포넌트를 수정하는건 너무 비효율적이다.</p>\n<p>/assets/style/theme.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mobile</span><span class=\"token operator\">:</span> <span class=\"token string\">\"767px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">desktop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"768px\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mainColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#4748C6\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">subColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#1B1B1B\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mobile</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(max-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>mobile<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">desktop</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>desktop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> theme</code></pre></div>\n<p>App.js (또는 index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n<span class=\"token keyword\">import</span> theme <span class=\"token keyword\">from</span> <span class=\"token string\">\"./assets/style/theme\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>theme 사용하기</h2>\n<h4>1. styled-component에서 사용하기</h4>\n<p>${props => props.theme.속성명}으로 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n\n<span class=\"token keyword\">const</span> RegisterContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>section<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  @media </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>desktop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> {\n    background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>mainColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  }\n  @media </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>mo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> {\n    background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>subColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Register</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>RegisterContainer<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RegisterContainer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Register</code></pre></div>\n<h4>2. Component의 props로 사용하기</h4>\n<p>useContext와 ThemeContext를 사용해서 theme의 값을 사용하여 컴포넌트의 props style로 전달하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> styled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> ThemeContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n\n<span class=\"token keyword\">const</span> RegisterContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>section<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  ...\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>textColor <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>textColor <span class=\"token operator\">:</span> <span class=\"token string\">\"#323232\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Register</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> themeContext <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>RegisterContainer textColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>themeContext<span class=\"token punctuation\">.</span>mainColor<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RegisterContainer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Register</code></pre></div>\n<h2>Global 스타일 설정하기</h2>\n<p>모든 컴포넌트에서 쓰일 기본 스타일을 정의 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// assets/style/GlobalStyle.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createGlobalStyle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n\n<span class=\"token keyword\">const</span> GlobalStyle <span class=\"token operator\">=</span> createGlobalStyle<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  * {\n    margin: 0;\n    padding: 0;  \n    box-sizing: border-box;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle\n\n<span class=\"token comment\">// App.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>GlobalStyle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>theme.js 파일안에 공통된 font-size, color등을 설정하면 더욱 활용도가 높아질 것 같다.</p>\n<p><small class=\"from add\">참고 : <a href=\"https://velog.io/@hoi/Styled-components-ThemeProvider를-활용한-스타일-환경-구축\" target=\"_blank\">https://velog.io/@hoi/Styled-components-ThemeProvider를-활용한-스타일-환경-구축</a>\n</small></p>","frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기","date":"January 27, 2022","update":null,"tags":["react"],"series":null},"fields":{"slug":"/2022-01-27-styled-components/","readingTime":{"minutes":3.165}}},"seriesList":{"edges":[{"node":{"id":"cda2b5ec-2352-5fab-a78f-203b8a13f6d3","fields":{"slug":"/2021-09-21-vue-clap-button/"},"frontmatter":{"title":"[vue] 박수치기 버튼 만들기 (vue clap button)"}}},{"node":{"id":"679ce7d0-ac86-5d31-b1e6-75629a73298e","fields":{"slug":"/2021-09-21-sematic-tag/"},"frontmatter":{"title":"[html] Semantic Tag Layout (시맨틱 태그)"}}},{"node":{"id":"0f540fbf-fa00-51d8-a69b-362bcd95064b","fields":{"slug":"/2021-09-21-javascript-object/"},"frontmatter":{"title":"[javascript] 객체 수정 제어 : preventExtensions(), seal(), freeze()"}}},{"node":{"id":"d2d9d829-54a1-5634-91d5-45fac4b1cc0c","fields":{"slug":"/2021-09-21-rwd-awd/"},"frontmatter":{"title":"[web] 반응형(RWD)웹과 적응형(AWD)웹"}}},{"node":{"id":"9d0fe331-2751-5953-aa44-0e16db0c7fb8","fields":{"slug":"/2021-09-21-react-modal/"},"frontmatter":{"title":"[react] 모달 팝업창 만들기 (react modal)"}}},{"node":{"id":"78cb264f-3cd8-51d9-935d-a54919bf75cb","fields":{"slug":"/2021-09-21-function-prototype/"},"frontmatter":{"title":"[javascript] 함수의 call, apply, bind 메서드"}}},{"node":{"id":"56a909f7-7549-5d0b-b415-419a7cc01e31","fields":{"slug":"/2021-09-21-scroll/"},"frontmatter":{"title":"[html] 특정 영역으로 스크롤 이동 - 앵커기능(anchor) vs data 속성"}}},{"node":{"id":"63d7adfa-e531-5d14-8412-08debb85c61c","fields":{"slug":"/2021-09-21-object/"},"frontmatter":{"title":"[javascript] Object.assign() & Object.create()"}}},{"node":{"id":"65edd391-3bc1-50b9-bfa0-7131dae44dab","fields":{"slug":"/2021-09-21-scope/"},"frontmatter":{"title":"[javascript] execution context, scope (실행 컨텍스트, 스코프)"}}},{"node":{"id":"7e343233-94ed-56cf-9910-52c776c8a3be","fields":{"slug":"/2021-09-21-hoisting/"},"frontmatter":{"title":"[javascript] hoisting (호이스팅)"}}},{"node":{"id":"85103131-d723-51b4-b44e-9826c2904c35","fields":{"slug":"/2021-09-21-closure/"},"frontmatter":{"title":"[javascript] closure (클로저)"}}},{"node":{"id":"95311023-ebf3-5930-9901-38251dab366c","fields":{"slug":"/2021-10-26-gaysby/"},"frontmatter":{"title":"[gatsby] Google Search Console과 Analytics 추가하기"}}},{"node":{"id":"66fc0851-9b11-531d-ab93-8c7ef96f00f2","fields":{"slug":"/2021-10-27-react-firebase/"},"frontmatter":{"title":"[react] firebase 프로젝트 배포하기"}}},{"node":{"id":"834b8d15-98c3-56cb-a0b7-a01249eb5306","fields":{"slug":"/2021-10-30-var-let-const/"},"frontmatter":{"title":"[javascript] var, let, const"}}},{"node":{"id":"2d86322e-5a98-5d48-8b7f-9282c23dc2ad","fields":{"slug":"/2021-11-09-algorithm/"},"frontmatter":{"title":"[algorithm] 약수, 소수, 최대공약수, 최소공배수"}}},{"node":{"id":"69f3fb44-e54b-5c78-9f92-455cb8ef35a1","fields":{"slug":"/2021-11-25-mui-react/"},"frontmatter":{"title":"[react] Material ui 템플릿 (Mui) 으로 회원가입 페이지 만들기 "}}},{"node":{"id":"816f9701-6511-5f2d-8a47-b7a7790d951f","fields":{"slug":"/2021-11-28-algorithm/"},"frontmatter":{"title":"[algorithm] LeetCode 139. Word Break "}}},{"node":{"id":"fe9cd36c-84ac-5421-9a66-9fa8b2a19a61","fields":{"slug":"/2021-12-02-bigO/"},"frontmatter":{"title":"[algorithm] 자바스크립트 빅오 표기법 (Big-O)"}}},{"node":{"id":"6e5a01c6-d6a4-5d98-97ae-5e0b20dd2e60","fields":{"slug":"/2021-12-07-sorting-algorithm/"},"frontmatter":{"title":"[algorithm] 정렬 알고리즘 - 버블, 삽입, 선택, 병합, 퀵"}}},{"node":{"id":"e4560516-6f0d-5551-b136-d736e1b42fad","fields":{"slug":"/2021-12-12-gaysby/"},"frontmatter":{"title":"[gatsby] gaysby로 TIL만들기"}}},{"node":{"id":"d93ca222-0050-50c9-bead-bb3405317d37","fields":{"slug":"/2021-12-14-codility/"},"frontmatter":{"title":"[algorithm] Codility Lesson 4. MissingInteger"}}},{"node":{"id":"efa29df6-3aaf-55b0-9340-914a10cada60","fields":{"slug":"/2021-12-22-react-redux-persist/"},"frontmatter":{"title":"[react] react프로젝트에 redux-persist 적용하기"}}},{"node":{"id":"b3eceb67-737c-57b0-aa86-d5e3e986e4e0","fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}}},{"node":{"id":"69f9000b-b802-52f7-972c-8a3c063d77f5","fields":{"slug":"/2022-01-27-styled-components/"},"frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기"}}},{"node":{"id":"5cb75518-5467-5eb0-af90-119d9f85fb47","fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},{"node":{"id":"bd4e5fe5-60aa-5910-aa53-158402efc5ba","fields":{"slug":"/2022-02-18-react/"},"frontmatter":{"title":"[react] CRA없이 React환경 구축하기 (웹팩, 바벨)"}}},{"node":{"id":"48dc2a6f-ac5f-53d3-9b3a-4280ba61d245","fields":{"slug":"/2022-03-03-react-modal/"},"frontmatter":{"title":"[react] transition이 적용된 Modal 만들기"}}},{"node":{"id":"b22168db-5046-5472-9d32-95cb46dada82","fields":{"slug":"/2022-04-05-react/"},"frontmatter":{"title":"[react] react 코딩 컨벤션"}}},{"node":{"id":"6da181be-4e71-5490-90e7-1e4e104a3b5d","fields":{"slug":"/2022-03-09/"},"frontmatter":{"title":"[diary] 프론트엔드 신입 면접 준비하기"}}},{"node":{"id":"79cd848c-338e-5730-871e-9e888fbf97d3","fields":{"slug":"/2022-04-25-git-basic/"},"frontmatter":{"title":"[git] git 기본 사용법"}}},{"node":{"id":"17b41f53-599b-54fb-97cd-6593cd675049","fields":{"slug":"/2022-04-25-browsers-repository/"},"frontmatter":{"title":"[web] Storage vs Cookie"}}},{"node":{"id":"497e97f7-1274-5c98-9b2d-37dffdca69b3","fields":{"slug":"/2022-04-25-redux-saga/"},"frontmatter":{"title":"[redux] Redux Saga"}}},{"node":{"id":"7ff10a35-f023-56d6-bbed-9dff709aa42e","fields":{"slug":"/2022-04-25-hooks/"},"frontmatter":{"title":"[react] React Hooks (리액트 훅스)"}}},{"node":{"id":"6a7ed678-570c-5ef2-b3b0-aea1cd60121c","fields":{"slug":"/2022-04-25-virtual-dom/"},"frontmatter":{"title":"[react] Virtual Dom (가상 돔)"}}},{"node":{"id":"d6f4badb-e846-5a41-a0e1-0b4caf139e5d","fields":{"slug":"/2022-04-25-async-await/"},"frontmatter":{"title":"[javascript] Async await"}}},{"node":{"id":"a6c2830d-1e5f-5c35-ad22-fe9c9d6db0fc","fields":{"slug":"/2022-04-25-js-runtime/"},"frontmatter":{"title":"[javascript] 자바스크립트 런타임"}}},{"node":{"id":"e9c092a5-d6c7-5bdc-8f3b-06707cce1f2c","fields":{"slug":"/2022-04-25-promise/"},"frontmatter":{"title":"[javascript] Promise"}}},{"node":{"id":"39995143-b99f-58db-b310-a5939494910b","fields":{"slug":"/2022-04-25-throttle-debounce/"},"frontmatter":{"title":"[javascript] throttling과 debouncing"}}},{"node":{"id":"cb4bc46b-57de-548a-bc88-62c035f0399e","fields":{"slug":"/2022-04-25-url-web/"},"frontmatter":{"title":"[web] 브라우저에 URL을 입력했을 때 발생하는 일들"}}},{"node":{"id":"8004743f-6e98-5860-b3f6-8d233a2e2069","fields":{"slug":"/2022-06-12/"},"frontmatter":{"title":"[diary] 성장하는 개발자"}}},{"node":{"id":"1073ece2-71cc-5c2c-81bd-6fb9067ad08b","fields":{"slug":"/2022-08-06-react-query/"},"frontmatter":{"title":"[react] React Query 기초"}}},{"node":{"id":"6c620cb9-6a9f-5334-b202-995c82364d2e","fields":{"slug":"/2022-08-15-recoil/"},"frontmatter":{"title":"[react] Recoil 상태관리 라이브러리"}}},{"node":{"id":"6c950478-f5ee-5bd1-9199-83ed4560be58","fields":{"slug":"/2022-11-06-nextjs-13/"},"frontmatter":{"title":"[nextjs] Next.js 13"}}},{"node":{"id":"d8c938aa-7055-5f97-afde-c49ad034903b","fields":{"slug":"/2023-01-08/"},"frontmatter":{"title":"[diary] 2022년 회고"}}},{"node":{"id":"1a71306b-4153-54a5-8a72-bbfdc10f66ad","fields":{"slug":"/2023-01-23-array-to-object/"},"frontmatter":{"title":"[javascript] 배열에서 특정값을 선택해서 객체로 변환하기 (배열을 객체로)"}}},{"node":{"id":"86d9b0f8-f8de-5825-b89f-bb3eb5b09aae","fields":{"slug":"/2023-03-03-git/"},"frontmatter":{"title":"[git] 실무에서 사용했던 git 정리"}}},{"node":{"id":"13274fa5-d4c3-5984-bdbb-8450a7820a4c","fields":{"slug":"/2023-08-15-vercel-node-version-update/"},"frontmatter":{"title":"[nextjs] nextjs node버전 업데이트 여정 (tailwind custom class error)"}}},{"node":{"id":"a27025cd-0932-55e4-b1ea-feac0b76aa51","fields":{"slug":"/2023-12-11-npm-install/"},"frontmatter":{"title":"[npm/yarn] 한 프로젝트에서 같은 라이브러리 다른 버전 설치하기"}}},{"node":{"id":"14135540-61d6-5bb1-a13b-a94376b2fbda","fields":{"slug":"/2024-02-14-nextjs-with-sentry/"},"frontmatter":{"title":"[nextjs] sentry + slack으로 nextjs 에러 모니터링 하기 (slack 채널 연동)"}}}]},"previous":{"fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}},"next":{"fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},"pageContext":{"id":"69f9000b-b802-52f7-972c-8a3c063d77f5","series":null,"previousPostId":"b3eceb67-737c-57b0-aa86-d5e3e986e4e0","nextPostId":"5cb75518-5467-5eb0-af90-119d9f85fb47"}},"staticQueryHashes":[],"slicesMap":{}}