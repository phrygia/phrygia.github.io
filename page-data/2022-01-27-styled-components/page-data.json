{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-01-27-styled-components/","result":{"data":{"site":{"siteMetadata":{"title":"phrygia dev.log"}},"markdownRemark":{"id":"c056e9c2-9b42-5395-885a-63f763406f36","excerpt":"react를 배우던 초창기에는 를 일일히 써주면서 코딩했던 기억이 있다. \n사이드 프로젝트에서 styled-components를 사용하고 있는데 저 코드를 일일히 썼을 때 디자이너분이 사이즈의 기준을 바꾸거나 하 코딩한 모든 컴포넌트를 수정해야 한다. \nreact로 여러가지 개인 프로젝트나 팀 프로젝트를 진행해보았기 때문에 저런 하드코딩적인 느낌을 지우고…","html":"<p>react를 배우던 초창기에는 <code class=\"language-text\">@media (min-width: 768px) {} @media (max-width: 767px) {}</code>를 일일히 써주면서 코딩했던 기억이 있다. <br>\n사이드 프로젝트에서 styled-components를 사용하고 있는데 저 코드를 일일히 썼을 때 디자이너분이 사이즈의 기준을 바꾸거나 하 코딩한 모든 컴포넌트를 수정해야 한다. <br>\nreact로 여러가지 개인 프로젝트나 팀 프로젝트를 진행해보았기 때문에 저런 하드코딩적인 느낌을 지우고 싶었다. <br>\nstyled-components에는 <code class=\"language-text\">ThemeProvider</code>라는 속성을 사용해 공통으로 스타일을 관리해 줄 수 있다고 한다.</p>\n<h2>ThemeProvider</h2>\n<p>Context API를 기반으로 작동하기 때문에 ThemeProvider로 감싸진 모든 하위 컴포넌트들은 전달받은 theme를 props로 사용할 수 있다.<br> *특히 color사용에 좋다 → 프로젝트를 진행하면서 메인컬러가 바뀌는 경우가 있는데 모든 컴포넌트를 수정하는건 너무 비효율적이다.</p>\n<p>/assets/style/theme.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mobile</span><span class=\"token operator\">:</span> <span class=\"token string\">\"767px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">desktop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"768px\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mainColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#4748C6\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">subColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#1B1B1B\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mobile</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(max-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>mobile<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">desktop</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>desktop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> theme</code></pre></div>\n<p>App.js (또는 index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n<span class=\"token keyword\">import</span> theme <span class=\"token keyword\">from</span> <span class=\"token string\">\"./assets/style/theme\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>theme 사용하기</h2>\n<h4>1. styled-component에서 사용하기</h4>\n<p>${props => props.theme.속성명}으로 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n\n<span class=\"token keyword\">const</span> RegisterContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>section<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  @media </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>desktop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> {\n    background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>mainColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  }\n  @media </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>mo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> {\n    background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>subColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Register</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>RegisterContainer<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RegisterContainer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Register</code></pre></div>\n<h4>2. Component의 props로 사용하기</h4>\n<p>useContext와 ThemeContext를 사용해서 theme의 값을 사용하여 컴포넌트의 props style로 전달하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> styled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> ThemeContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n\n<span class=\"token keyword\">const</span> RegisterContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>section<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  ...\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>textColor <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>textColor <span class=\"token operator\">:</span> <span class=\"token string\">\"#323232\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Register</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> themeContext <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>RegisterContainer textColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>themeContext<span class=\"token punctuation\">.</span>mainColor<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RegisterContainer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Register</code></pre></div>\n<h2>Global 스타일 설정하기</h2>\n<p>모든 컴포넌트에서 쓰일 기본 스타일을 정의 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// assets/style/GlobalStyle.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createGlobalStyle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n\n<span class=\"token keyword\">const</span> GlobalStyle <span class=\"token operator\">=</span> createGlobalStyle<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  * {\n    margin: 0;\n    padding: 0;  \n    box-sizing: border-box;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle\n\n<span class=\"token comment\">// App.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Router <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>GlobalStyle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>theme.js 파일안에 공통된 font-size, color등을 설정하면 더욱 활용도가 높아질 것 같다.</p>\n<p><small class=\"from add\">참고 : <a href=\"https://velog.io/@hoi/Styled-components-ThemeProvider를-활용한-스타일-환경-구축\" target=\"_blank\">https://velog.io/@hoi/Styled-components-ThemeProvider를-활용한-스타일-환경-구축</a>\n</small></p>","frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기","date":"January 27, 2022","update":null,"tags":["react"],"series":null},"fields":{"slug":"/2022-01-27-styled-components/","readingTime":{"minutes":3.165}}},"seriesList":{"edges":[{"node":{"id":"a49ba7fe-2298-5593-99e5-fc94628ca08c","fields":{"slug":"/2021-09-21-vue-clap-button/"},"frontmatter":{"title":"[vue] 박수치기 버튼 만들기 (vue clap button)"}}},{"node":{"id":"86892888-c819-59c7-a91e-8dba2c018aa3","fields":{"slug":"/2021-09-21-sematic-tag/"},"frontmatter":{"title":"[html] Semantic Tag Layout (시맨틱 태그)"}}},{"node":{"id":"0cf44020-e73b-5d81-97ab-eb71a6a2f774","fields":{"slug":"/2021-09-21-javascript-object/"},"frontmatter":{"title":"[javascript] 객체 수정 제어 : preventExtensions(), seal(), freeze()"}}},{"node":{"id":"87f26728-3fd2-5307-914c-b108135a8fdd","fields":{"slug":"/2021-09-21-rwd-awd/"},"frontmatter":{"title":"[web] 반응형(RWD)웹과 적응형(AWD)웹"}}},{"node":{"id":"e5af2a5d-1fa4-5015-b69d-d3df92d26d5c","fields":{"slug":"/2021-09-21-react-modal/"},"frontmatter":{"title":"[react] 모달 팝업창 만들기 (react modal)"}}},{"node":{"id":"e4a5dcd7-3dab-593f-832d-c6d0b249a7f6","fields":{"slug":"/2021-09-21-function-prototype/"},"frontmatter":{"title":"[javascript] 함수의 call, apply, bind 메서드"}}},{"node":{"id":"5f56739f-415e-566a-9e1b-e5b385ba25d3","fields":{"slug":"/2021-09-21-scroll/"},"frontmatter":{"title":"[html] 특정 영역으로 스크롤 이동 - 앵커기능(anchor) vs data 속성"}}},{"node":{"id":"a038fa37-3752-59b0-83e1-77252e300845","fields":{"slug":"/2021-09-21-object/"},"frontmatter":{"title":"[javascript] Object.assign() & Object.create()"}}},{"node":{"id":"9cc5e665-eee9-55ba-bc71-f83945e975df","fields":{"slug":"/2021-09-21-scope/"},"frontmatter":{"title":"[javascript] execution context, scope (실행 컨텍스트, 스코프)"}}},{"node":{"id":"d1fa176c-5bf0-5be0-a723-0b08fc3de5d1","fields":{"slug":"/2021-09-21-hoisting/"},"frontmatter":{"title":"[javascript] hoisting (호이스팅)"}}},{"node":{"id":"327dc0b1-3014-5570-8752-54a472ce4dcb","fields":{"slug":"/2021-09-21-closure/"},"frontmatter":{"title":"[javascript] closure (클로저)"}}},{"node":{"id":"cdaec2e2-37a5-515e-85f9-3cc8150d62b5","fields":{"slug":"/2021-10-26-gaysby/"},"frontmatter":{"title":"[gatsby] Google Search Console과 Analytics 추가하기"}}},{"node":{"id":"d39b84bd-dd38-56db-ae71-e1536a6f66bb","fields":{"slug":"/2021-10-27-react-firebase/"},"frontmatter":{"title":"[react] firebase 프로젝트 배포하기"}}},{"node":{"id":"39469573-8887-50f5-959e-048e8fbac3d9","fields":{"slug":"/2021-10-30-var-let-const/"},"frontmatter":{"title":"[javascript] var, let, const"}}},{"node":{"id":"1d0b228b-a81b-5692-96b9-876668a4bb8d","fields":{"slug":"/2021-11-09-algorithm/"},"frontmatter":{"title":"[algorithm] 약수, 소수, 최대공약수, 최소공배수"}}},{"node":{"id":"11a3e5c7-dd76-5f0a-95ac-eef303421178","fields":{"slug":"/2021-11-25-mui-react/"},"frontmatter":{"title":"[react] Material ui 템플릿 (Mui) 으로 회원가입 페이지 만들기 "}}},{"node":{"id":"66c4b29a-927c-5d55-b1b5-9c3f8a2e08ea","fields":{"slug":"/2021-11-28-algorithm/"},"frontmatter":{"title":"[algorithm] LeetCode 139. Word Break "}}},{"node":{"id":"b0ff1b19-b212-5308-a03d-549609b1cbf5","fields":{"slug":"/2021-12-02-bigO/"},"frontmatter":{"title":"[algorithm] 자바스크립트 빅오 표기법 (Big-O)"}}},{"node":{"id":"7b77461b-7632-57fa-ae82-674d2e5873ec","fields":{"slug":"/2021-12-07-sorting-algorithm/"},"frontmatter":{"title":"[algorithm] 정렬 알고리즘 - 버블, 삽입, 선택, 병합, 퀵"}}},{"node":{"id":"b8d3db01-c9d0-5533-bce9-4852ce246694","fields":{"slug":"/2021-12-12-gaysby/"},"frontmatter":{"title":"[gatsby] gaysby로 TIL만들기"}}},{"node":{"id":"9a40e149-1d55-55e8-9377-47d54cf324d6","fields":{"slug":"/2021-12-14-codility/"},"frontmatter":{"title":"[algorithm] Codility Lesson 4. MissingInteger"}}},{"node":{"id":"82820512-6ca7-5276-a5b3-1325a39344d1","fields":{"slug":"/2021-12-22-react-redux-persist/"},"frontmatter":{"title":"[react] react프로젝트에 redux-persist 적용하기"}}},{"node":{"id":"f29620f6-3bd9-56eb-8239-a31f00b3363d","fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}}},{"node":{"id":"c056e9c2-9b42-5395-885a-63f763406f36","fields":{"slug":"/2022-01-27-styled-components/"},"frontmatter":{"title":"[react] styled-components 반응형 스타일 설정하기"}}},{"node":{"id":"41c02eb7-f88d-5bd8-a3cf-593a93056f95","fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},{"node":{"id":"6a9e7416-f1ad-5ac8-97a1-f94e647cd5fa","fields":{"slug":"/2022-02-18-react/"},"frontmatter":{"title":"[react] CRA없이 React환경 구축하기 (웹팩, 바벨)"}}},{"node":{"id":"527df9ef-44b6-5e3b-9249-2b2b3fa1ac1c","fields":{"slug":"/2022-03-03-react-modal/"},"frontmatter":{"title":"[react] transition이 적용된 Modal 만들기"}}},{"node":{"id":"2f8812c5-dbf6-582e-9d44-51f2023d3b4c","fields":{"slug":"/2022-04-05-react/"},"frontmatter":{"title":"[react] react 코딩 컨벤션"}}},{"node":{"id":"da92f528-b51e-5054-87c5-1f36cec6a97b","fields":{"slug":"/2022-03-09/"},"frontmatter":{"title":"[diary] 프론트엔드 신입 면접 준비하기"}}},{"node":{"id":"b8e04d5f-aab0-5c87-bdd0-7fd3bea4b241","fields":{"slug":"/2022-04-25-git-basic/"},"frontmatter":{"title":"[git] git 기본 사용법"}}},{"node":{"id":"fcdfde95-211e-5fae-b419-b798b39c230d","fields":{"slug":"/2022-04-25-browsers-repository/"},"frontmatter":{"title":"[web] Storage vs Cookie"}}},{"node":{"id":"d1e364e6-edec-506d-b919-41d02b91b667","fields":{"slug":"/2022-04-25-redux-saga/"},"frontmatter":{"title":"[redux] Redux Saga"}}},{"node":{"id":"cabe57d4-a242-5b13-82b0-43ed5458cd03","fields":{"slug":"/2022-04-25-hooks/"},"frontmatter":{"title":"[react] React Hooks (리액트 훅스)"}}},{"node":{"id":"f7ae8bd6-d30a-52ea-bc25-4cb6dd900280","fields":{"slug":"/2022-04-25-virtual-dom/"},"frontmatter":{"title":"[react] Virtual Dom (가상 돔)"}}},{"node":{"id":"8f80827a-ba2b-55b7-9ed1-148827c19873","fields":{"slug":"/2022-04-25-async-await/"},"frontmatter":{"title":"[javascript] Async await"}}},{"node":{"id":"02581db7-7b59-5b5b-ad64-5b7f093151cd","fields":{"slug":"/2022-04-25-js-runtime/"},"frontmatter":{"title":"[javascript] 자바스크립트 런타임"}}},{"node":{"id":"3b3084d4-9cdc-5003-8eb6-7449b17bb244","fields":{"slug":"/2022-04-25-promise/"},"frontmatter":{"title":"[javascript] Promise"}}},{"node":{"id":"633854f2-750f-5d46-b542-65323e325c47","fields":{"slug":"/2022-04-25-throttle-debounce/"},"frontmatter":{"title":"[javascript] throttling과 debouncing"}}},{"node":{"id":"45b950b8-83ca-561c-832d-103769b353a1","fields":{"slug":"/2022-04-25-url-web/"},"frontmatter":{"title":"[web] 브라우저에 URL을 입력했을 때 발생하는 일들"}}},{"node":{"id":"9e551fd8-ac87-5bf1-b009-76368e5d010e","fields":{"slug":"/2022-06-12/"},"frontmatter":{"title":"[diary] 성장하는 개발자"}}},{"node":{"id":"8250c92a-0f9d-5c47-be28-9cb616399585","fields":{"slug":"/2022-08-06-react-query/"},"frontmatter":{"title":"[react] React Query 기초"}}},{"node":{"id":"0282216d-5c95-5f37-b0d3-75173c2d0f02","fields":{"slug":"/2022-08-15-recoil/"},"frontmatter":{"title":"[react] Recoil 상태관리 라이브러리"}}},{"node":{"id":"4cf7e012-6c31-5681-a23e-f451f55f9ef3","fields":{"slug":"/2022-11-06-nextjs-13/"},"frontmatter":{"title":"[nextjs] Next.js 13"}}},{"node":{"id":"9cedfe8b-a05b-5bb1-b717-3b12ebae6193","fields":{"slug":"/2023-01-08/"},"frontmatter":{"title":"[diary] 2022년 회고"}}},{"node":{"id":"7571a5e0-4bbc-5824-9acf-d483240a8a69","fields":{"slug":"/2023-01-23-array-to-object/"},"frontmatter":{"title":"[javascript] 배열에서 특정값을 선택해서 객체로 변환하기 (배열을 객체로)"}}},{"node":{"id":"22dc2db7-3b64-579b-ab94-a1f2e27de264","fields":{"slug":"/2023-03-03-git/"},"frontmatter":{"title":"[git] 실무에서 사용했던 git 정리"}}},{"node":{"id":"2c4d88b2-d6fa-5445-949e-5764e2226ca5","fields":{"slug":"/2023-08-15-vercel-node-version-update/"},"frontmatter":{"title":"[nextjs] nextjs node버전 업데이트 여정 (tailwind custom class error)"}}},{"node":{"id":"3c536648-1dae-55d5-8a0a-4dd5655f02be","fields":{"slug":"/2023-12-11-npm-install/"},"frontmatter":{"title":"[npm/yarn] 한 프로젝트에서 같은 라이브러리 다른 버전 설치하기"}}}]},"previous":{"fields":{"slug":"/2022-01-02-aws/"},"frontmatter":{"title":"[aws] PuTTY로 윈도우에서 aws ec2 ssh 접속하기"}},"next":{"fields":{"slug":"/2022-02-06-scss-for/"},"frontmatter":{"title":"[scss] @for ~ through / to 차이점"}}},"pageContext":{"id":"c056e9c2-9b42-5395-885a-63f763406f36","series":null,"previousPostId":"f29620f6-3bd9-56eb-8239-a31f00b3363d","nextPostId":"41c02eb7-f88d-5bd8-a3cf-593a93056f95"}},"staticQueryHashes":[],"slicesMap":{}}