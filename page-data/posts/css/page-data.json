{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/css",
    "result": {"pageContext":{"currentCategory":"css","categories":["All","react","css","web","js","algorithm","gatsby","vue"],"edges":[{"node":{"id":"08bf8942-8114-5fed-8627-ea9b9c2b3c25","excerpt":"scss의 @for를 이용하면 반복적인 구문을 쉽게 처리할 수있다. \r\n인강에선 @for ~ through로 설명을 했는데 vs코드의 자동완성 코드는 @for ~ to였다. \r\n어떤 차이점이 있는걸까? @for 기본 사용법  $var : 변수명 \r\n<start> : 시작하는 숫자와 \r\n<end> : 끝나는 숫자  for ~ through end로 지장한 숫자까지 반복 for ~ to end로 지장한 숫자-1까지 반복 솔직히 to가 왜있는지 모르겠다 😅 \r\nscss가 자바스크립트랑 비슷한 개념이 많다보니까 js for문의 0인덱스에 익숙한 개발자들을 위해서 나온걸까? \r\n나는 주로 through를 이용해서 코딩하는 습관을 길러야겠다. \r\n(to / through를 동시다발적으로 사용하면 나중에 리뷰할 때 헷갈릴 것 같다.) @for 기본 사용법 for ~ through for ~ to","fields":{"slug":"/css/2022-02-06-scss-for/"},"frontmatter":{"categories":"css","title":"[scss] @for ~ through / to 차이점","date":"February 06, 2022"}},"next":{"fields":{"slug":"/react/2022-01-27-styled-components/"}},"previous":{"fields":{"slug":"/react/2022-02-18-react/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}