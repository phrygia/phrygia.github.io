{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/redux",
    "result": {"pageContext":{"currentCategory":"redux","categories":["All","react","diary","web","redux","js","git","css","algorithm","gatsby","vue"],"edges":[{"node":{"id":"b81b99a1-cdee-5c20-a297-1a4d919b095f","excerpt":"Redux의 미들웨어 라이브러리 중 한 개로 Redux-thunk, Redux-toolkit 등 다양한 라이브러리가 존재하지만 Redux-saga를 사용하는 기업이 많다. \r\nRedux-saga는 다른 라이브러리에 비해 더 복잡한 비동기 처리를 할 수 있다는 장점이 있다. \r\n단점은 러닝커브가 높고 제네레이터라는 문법에 익숙하지 않다면 어색하게 느껴 질 수 있다. 또한 코드가 길어져 복잡해질 수 있다. \r\n(최근엔 toolkit도 많이 쓰이며 saga의 기능을 설치하여 연동 가능하다고 하니 toolkit도 공부하면 좋을 것 같다.)\r\n 선수지식 - 제너레이터 (Generator) 함수에 *를 붙이고, yield라는 문법을 사용 next()를 이용하여 다음 yield를 호출 Redux-saga 주요 Effects 1. fork 는 함수의 비동기적인 호출을 할 때 사용하며 순서 상관없이 실행할 때 사용한다. 2. call 은 동기 실행을 보장하며 순서대로 함수를 실행해야하는 API 요…","fields":{"slug":"/redux/2022-04-25-redux-saga/"},"frontmatter":{"categories":"redux","title":"[redux] Redux Saga","date":"April 25, 2022","emoji":"📓"}},"next":{"fields":{"slug":"/react/2022-04-25-virtual-dom/"}},"previous":{"fields":{"slug":"/web/2022-04-25-url-web/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}