{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/algorithm",
    "result": {"pageContext":{"currentCategory":"algorithm","categories":["All","js","algorithm","gatsby","react","web","vue"],"edges":[{"node":{"id":"b83836f9-4d16-5e0a-bcc3-bc76fe1cf189","excerpt":"문제 : codilit MissingInteger \nN개의 정수로 이루어진 배열 A가 있다. A에 존재하지 않는 가장 작은 양의 정수를 반환하는 함수를 작성하는 문제이다.\n(0보다 큰 양의 정수를 반환해야 한다.)\n예를들어, 배열 A가 [−1, −3]으로 주어졌을때 0보다 큰 1이 반환되어야 한다.\n Solution: 처음 내가 푼 코드는 이렇다.\n배열 A를 순서대로 정렬하고 1부터 A의 가장큰수로 채워진 새로운 배열 arr을 만든다. \n그리고 존재하는 값을 확인하기 위해 Set을 사용하여 arr의 값을 복사한다. (indexOf를 사용하면 시간측정이 길어졌기 때문에 Set을 사용했다.)\nfor문으로 A의 배열을 돌면서 set에 값이 있는지 체크하고 있다면 delete 메소드로 삭제한다.  남아있는 배열의 개수가 0개라면 A = [1,2,3] 처럼 순서대로 채워진 배열이라는 뜻이기 때문에 3보다 큰 4를 리턴하기 위해 배열의 마지막 원소보다 1이 큰 수를 리턴한다. \nA = [1,…","fields":{"slug":"/algorithm/2021-12-14-codility/"},"frontmatter":{"categories":"js algorithm","title":"[algorithm] Codility Lesson 4. MissingInteger","date":"December 14, 2021"}},"next":{"fields":{"slug":"/gatsby/2021-12-12-gaysby/"}},"previous":null},{"node":{"id":"fa7346fa-c32a-5186-a69b-ed162684931e","excerpt":"정렬된 배열에서 요소를 찾는 것이 정렬되지 않는 배열에서 찾는 것보다 빠르고 쉽다. \n정렬 알고리즘을 사용해 메모리에서 배열을 정렬하거나 정렬된 배열을 파일에 기록할 수 있다. ArrayList함수를 만들어 정렬/검색 대상 데이터를 저장한다.\n(각 알고리즘에 대한 설명은 검색하면 너무 자세하게 나와있기 때문에 코드 위주의 포스팅을 했다.) 1. 버블정렬 가장 간단한 정렬 알고리즘이다. \n버블정렬은 전체 배열을 순회하면서 인접한 두 원소를 비교하고 그 결과에 따라 두 원소의 위치를 서로 바꾼다. \n버블정렬은 모든 값을 비교하기 때문에 정렬 알고리즘들 중에서 가장 최악이라고 할 수 있다. 2. 삽입정렬 배열의 모든 요소를 앞에서부터 차례대로 검색하면서 정렬된 요소와 비교한다. \n정렬되지 않은 요소들을 배열의 자신의 위치를 찾아 이동(삽입)시킨다.\n(두번째 요소부터 정렬을 시작한다.) 3. 선택정렬 가장 작은 요소를 찾아서(선택해서) 해당 요소를 배열의 현 위치에 삽입하는 방식이다. *…","fields":{"slug":"/algorithm/2021-12-07-sorting-algorithm/"},"frontmatter":{"categories":"js algorithm","title":"[algorithm] 정렬 알고리즘 - 버블, 삽입, 선택, 병합, 퀵","date":"December 07, 2021"}},"next":{"fields":{"slug":"/algorithm/2021-12-02-bigO/"}},"previous":{"fields":{"slug":"/gatsby/2021-12-12-gaysby/"}}},{"node":{"id":"77ee7db2-1ce6-5482-b717-539af2723280","excerpt":"알고리즘을 구현하기 전에 알고리즘이 얼마나 효과적인지 분석하는 법을 이해해야 한다.\n알고리즘을 구현할 때 빅오 표기법이 해당 알고리즘이 얼마나 효율적인지를 나타내기 때문에 빅오 표기법은 중요하다.\n효율적인 방법을 고민한다는 것은 시간 복잡도를 고민한다는 것과 같은 말이다. \n Time Complexity (시간 복잡도) 문제를 해결하는데 걸리는 시간과 입력의 관계를 가리킨다. \n즉, 입력값에 따라 연산을 실행할 때, 연산 횟수에 비해 얼마만큼의 시간이 걸리는가를 의미한다. \n시간복잡도를 고민한다는 것은 입력값이 커짐에 따라 증가하는 시간을 최소화한 알고리즘을 만들었다는 의미이기도 한다.\n시간복잡도는 Big-o 표기법을 사용해 나타낼 수 있다. \n출처 : 자바스크립트로하는 자료 구조와 알고리즘 알고리즘 분석 시 가장 자주 등장하는 유형 O 표기법 이해 알고리즘의 효율은 어떻게 측정할 수 있을까? \n보통 CPU(소요 시간), 메모리, 디스크, 네트워크의 사용량을 생각할 수 있는데, 그…","fields":{"slug":"/algorithm/2021-12-02-bigO/"},"frontmatter":{"categories":"js algorithm","title":"[algorithm] 자바스크립트 빅오 표기법 (Big-O)","date":"December 02, 2021"}},"next":{"fields":{"slug":"/algorithm/2021-11-28-algorithm/"}},"previous":{"fields":{"slug":"/algorithm/2021-12-07-sorting-algorithm/"}}},{"node":{"id":"f4a369fa-dc70-5864-aae0-2a4c4f64b840","excerpt":"Description: Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. \n문자열s와 단어들로 이루어진 배열 wordDict가 주어질 때, \nwordDict내의 문자들로 문자열 s를 만들 수 있는지 구하는 문제 (구할 수 있다면 true 반환)\n동일한 단어를 여러번 사용해도 되고 사용하지 않아도 된다. Solution: 처음에는 관련 주제를 살펴보지 않고 set을 이용해서 일치하는 단어가 배열에 있다면 문자열 s를 지워나가는 식으로 풀었다. \n이렇게 풀면 wordBreak(‘cars’, [“car”,“ca”,“rs”])에서 배열의 “car”을 먼저 만단 문자열 s는 “s”만 남게 되어 false를 리턴했다. \n“ca”,“rs” 를 사용하면 효율적으로 모든 문자…","fields":{"slug":"/algorithm/2021-11-28-algorithm/"},"frontmatter":{"categories":"js algorithm","title":"[algorithm] LeetCode 139. Word Break ","date":"November 28, 2021"}},"next":{"fields":{"slug":"/react/2021-11-25-mui-react/"}},"previous":{"fields":{"slug":"/algorithm/2021-12-02-bigO/"}}},{"node":{"id":"bce55080-5052-5743-a56d-f417778bfa73","excerpt":"프로그래머스에서 자바스크립트 알고리즘 문제를 풀다보면 간간히 접하게 되는 수학관련 문제들이 있다.\n그 중 자연수와 관련된(약수, 소수, 최대공약수, 최소공배수) 문제들이 있었는데 이에 대한 이론을 정리하고 프로그래머스 코딩테스트 연습에 나오는 문제들을 풀어보면서 정확한 개념을 터득하고자 정리해 보았다. \n(문제 - 약수의 합, 약수의 개수와 덧셈, 소수 만들기, 소수 찾기, 최대공약수와 최소공배수, N개의 최소공배수)\n 1. 약수 약수란 무엇인가? \n    어떤 수를 나머지가 없이 나누어떨어지게 하는 수를 그 수의 약수라고 한다. \n    예를 들면 8을 1, 2, 4, 8로 나누면 나머지가 없다. 이때 1, 2, 4, 8을 8의 약수라고 한다. 1. 약수의 합   문제풀이 2. 약수의 개수와 덧셈  문제풀이 https://programmers.co.kr/learn/courses/30/lessons/77884?language=javascript\n 2. 소수 소수란 무엇인가? \n  …","fields":{"slug":"/algorithm/2021-11-09-algorithm/"},"frontmatter":{"categories":"js algorithm","title":"[algorithm] 약수, 소수, 최대공약수, 최소공배수","date":"November 09, 2021"}},"next":{"fields":{"slug":"/js/2021-10-30-var-let-const/"}},"previous":{"fields":{"slug":"/react/2021-11-25-mui-react/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}