{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/react",
    "result": {"pageContext":{"currentCategory":"react","categories":["All","react","css","web","js","algorithm","gatsby","vue"],"edges":[{"node":{"id":"3b8c10b4-b900-5e38-8324-93b8d42578a2","excerpt":"최근 면접을 보면서 나의 코딩 스타일에 대해 생각하게 되었다. \r\n나는 많은 인강을 보면서 react를 독학한 케이스인데 아무래도 인강 강사님의 코드 스타일을 따라가게 되었고 무의식적으로 그렇게 코딩을 했었다. \r\n면접관님이 코딩스타일은 다 다르지만 내가 사용한 코딩스타일은 값과 코드를 확인하기 위해 여러군데를 살펴봐야 하기때문에 본인은 선호하는 방식이 아니라고 하셨다. (솔직히 생각해본적이 없어서 충격 😱)  신규 서비스를 개발하는 경우도 있지만 대부분의 개발은 기존코드를 유지보수 하는 경우가 많다. 이전 개발자가 코딩했던 스타일이 지극히 개인적이라면 어떻겠는가? 또는 동료 개발자가 내 스타일데로 코딩한 코드를 이해하지 못한다면? 개발자들은 자신이 코딩했던 코드도 까먹는 경우가 꽤 많다. 저 당시에 내가 왜 저렇게 코딩 했지?하는 경우를 많이 봤기 때문에 더더욱 개발자들 사이의 규칙이 중요한 것 같다. \r\n현업에서 혼자 개발하는 개발자는 드물다. 그렇기 때문에 협업을 위한 코딩 …","fields":{"slug":"/react/2022-04-05-react/"},"frontmatter":{"categories":"react","title":"[react] react 코딩 컨벤션","date":"April 05, 2022","emoji":"/img/coding-conventions-thumb.jpg"}},"next":{"fields":{"slug":"/react/2022-03-03-react-modal/"}},"previous":null},{"node":{"id":"f509326d-0a43-578d-8bff-3ccf1de4756c","excerpt":"내 블로그에서 가장 조회수가 높은 포스팅은 react 모달 포스팅이다. ([react] 모달 팝업창 만들기) \r\n전에 만들었던 Modal은 트랜지션이 적용되지 않았었다. 최근 프로젝트를 만들면서 트랜지션이 적용된 Modal을 만들어야 했었기에 트랜지션이 적용된 react Modal을 만들어 보기로 했다. \r\n(* Modal은 이전에 만들었던 코드에 트랜지션을 추가 적용한다.) 트랜지션이 적용된 Modal 컴포넌트 (함수형) -완성된 모습- 트랜지션 모달 *파일구조   - CSS - Modal.js - App.js 이전코드와 달라진점은 animate, visible 상태값을 추가하고 모달창을 열때와 닫을때의 상태를 체크하여 그에 맞는 css animation 값을 준다는 것이다. 특히, 모달창을 닫을때의 상태를 체크해서 setTimeout으로 애니메이션을 보여준다음 모달창을 사라지게 해야한다는 것이다.","fields":{"slug":"/react/2022-03-03-react-modal/"},"frontmatter":{"categories":"react","title":"[react] transition이 적용된 Modal 만들기","date":"March 03, 2022","emoji":"/img/react-modal-thumb.jpg"}},"next":{"fields":{"slug":"/react/2022-02-18-react/"}},"previous":{"fields":{"slug":"/react/2022-04-05-react/"}}},{"node":{"id":"57b8dc54-8ebd-541c-913b-374baea7164d","excerpt":"최근 구직활동을 시작하면서 사전과제를 받게 되었다. \r\n나의 포지션은 프론트엔드 개발자로 react 라이브러리를 사용하고 있기때문에 react로 자사 사이트 클론 코딩하고 api 요청에 대한 응답결과를 구현하는 과제였다. \r\n포트폴리오를 만들었을때는 CRA를 사용해서 리액트 프로젝트를 만들었었다. create-react-app 한줄만 입력하면 손쉽게 리액트 프로젝트를 만들 수 있었기 때문이다. 생각해보니 프론트엔드 자격요건이나 우대사항에 webpack & babel에 대한 이해나 지식을 요구하는 경우를 종종 보았는데 직접 설정해서 사용해본적은 인강으로 react를 배웠을때 정도였던 것 같다. 문득 직접 프로젝트를 설정할 수 있지만 CRA를 사용하는 것과 모르고 사용하는 것의 차이는 매우 크다는 생각이 들었다. 그래서 마침 사전과제도 요청받았겠다 과제도 하고 내 공부도 할 겸 (꿩먹고 알먹고😋) CRA없이 react 프로젝트를 만들고 프로젝트 환경을 설정해 보기로 했다.  웹팩과 바…","fields":{"slug":"/react/2022-02-18-react/"},"frontmatter":{"categories":"react","title":"[react] CRA없이 React환경 구축하기 (웹팩, 바벨)","date":"February 18, 2022","emoji":"📓"}},"next":{"fields":{"slug":"/css/2022-02-06-scss-for/"}},"previous":{"fields":{"slug":"/react/2022-03-03-react-modal/"}}},{"node":{"id":"c1e9ea31-ac56-5a66-8c15-21cba66d9c96","excerpt":"react를 배우던 초창기에는 를 일일히 써주면서 코딩했던 기억이 있다. \r\n사이드 프로젝트에서 styled-components를 사용하고 있는데 저 코드를 일일히 썼을 때 디자이너분이 사이즈의 기준을 바꾸거나 하 코딩한 모든 컴포넌트를 수정해야 한다. \r\nreact로 여러가지 개인 프로젝트나 팀 프로젝트를 진행해보았기 때문에 저런 하드코딩적인 느낌을 지우고 싶었다. \r\nstyled-components에는 라는 속성을 사용해 공통으로 스타일을 관리해 줄 수 있다고 한다.  ThemeProvider Context API를 기반으로 작동하기 때문에 ThemeProvider로 감싸진 모든 하위 컴포넌트들은 전달받은 theme를 props로 사용할 수 있다.\r\n*특히 color사용에 좋다 → 프로젝트를 진행하면서 메인컬러가 바뀌는 경우가 있는데 모든 컴포넌트를 수정하는건 너무 비효율적이다. /assets/style/theme.js App.js (또는 index.js) theme 사용하기 …","fields":{"slug":"/react/2022-01-27-styled-components/"},"frontmatter":{"categories":"react","title":"[react] styled-components 반응형 스타일 설정하기","date":"January 27, 2022","emoji":"📓"}},"next":{"fields":{"slug":"/web/2022-01-02-aws/"}},"previous":{"fields":{"slug":"/css/2022-02-06-scss-for/"}}},{"node":{"id":"620552dc-6b94-58ce-a0b0-063d7dd4489c","excerpt":"현재 진행하고 있는 팀프로젝트에서 rudux와 redux-saga를 사용하고 있다. \r\n나 외에도 프론트엔드분이 한분 계신데 store에 어떻게 저장할까 하다가 를 사용해 보고 싶어 제안해 보았고 동의해 주셔서 redux-persist를 사용하기로 하였다. redux-persist란 ? react에서 많이 사용하고 있는 redux는 상태관리로 유명한 라이브러리다. 하나의 store에서 데이터를 관리하면서 상태를 예측가능하게 만들고 유지보수 및 디버깅에 유리하기때문에 순수 js 및 js 라이브러리 및 프레임워크에서 많이 사용한다. \r\n하지만 새로고침을 하면 store의 데이터가 날아가기 때문에, 새로고침을 해도 상태를 유지시키는 기능을 구현해야 한다.\r\n대표적으로 브라우저의 localStorage나 sessionStorage를 이용한 방법이 있는데 직접 코드를 작성해야 하고, store의 데이터가 많아지수록 코드가 복잡해진다는 단점이 있다.  redux-persist는 localst…","fields":{"slug":"/react/2021-12-22-react-redux-persist/"},"frontmatter":{"categories":"react","title":"[react] react프로젝트에 redux-persist 적용하기","date":"December 22, 2021","emoji":"📓"}},"next":{"fields":{"slug":"/algorithm/2021-12-14-codility/"}},"previous":{"fields":{"slug":"/web/2022-01-02-aws/"}}},{"node":{"id":"23d6e1fe-c33e-525c-a257-47075559c166","excerpt":"얼마전부터 사이드 프로젝트를 시작하였다. \r\n프로젝트 인원은 나포함 프론트엔드 개발자 2명, 백엔드 개발자 1명\r\n3명 다 디자인과는 거리가 먼 사람들이었다. \r\n사이드 프로젝트의 규모가 큰것도 아니라 디자이너를 구하기가 어려웠다. \r\n디자인적으로 어떻게 할 지 고민을 하다 필자가 사용해본 material ui의 Template를 보고 라이브러리 적용을 권유했고 다른 프론트엔드 개발자분이 사용에 OK해 프로젝트에 적용해 보기로 했다.\r\nPS. Material UI가 v5로 업데이트 되면서 MUI로 이름이 변경되었다. 처음에는 비슷한 사이트인지 알고 당황했으나 이름이 변경됐을 뿐! 😅\r\nMaterial-UI (MUI) 홈페이지 : https://mui.com/ 1. 설치하기 사용하기 전에 패키지를 설치해야 한다. \r\nnpm, yarn 을 이용하여 설치 가능하다. (기본설치) \r\nMaterial에서는 다양한 svg 아이콘도 제공한다. \r\nMaterial icons : https://m…","fields":{"slug":"/react/2021-11-25-mui-react/"},"frontmatter":{"categories":"react","title":"[react] Material ui 템플릿 (Mui) 으로 회원가입 페이지 만들기 ","date":"November 27, 2021","emoji":"📓"}},"next":{"fields":{"slug":"/algorithm/2021-11-09-algorithm/"}},"previous":{"fields":{"slug":"/algorithm/2021-11-28-algorithm/"}}},{"node":{"id":"1d0a7e6f-2a16-5890-b39c-3e78e7fbab07","excerpt":"개인 포트폴리오 프로젝트 중 하나를 firebase를 이용하여 채팅앱을 만들었다. firebase를 이용하여 만들었으니 배포까지 해보자. google firebase에서 프로젝트를 만들어 앱에 연결된 상태이고 build까지 완료된 상태다.  1. CLI 설치 및 firebase 로그인 터미널 창에서 위 코드를 입력하고 로그인을 하면 가 뜨면 Y를 입력하고 구글 계정을 선택하여 로그인한다.  로그인이 완료되면 Success! 문구가 뜬다.\r\n  2. firebase 설정하기  이미 프로젝트를 생성했기 때문에 를 선택했다.   \r\n  → 미리 build한 폴더의 index.html파일을 사용하기 위해 build를 입력한다.  \r\n  → SPA일 경우 모든 url을 index.html으로 다시 작성하겠냐는 질문같은데 나는 리액트를 이용했기 때문에 Y를 입력했다.  \r\n  → 자동적으로 Github을 배포할거냐는 질문같은데 나는 N를 입력했다.  \r\n  → 이미 있는 index.html을…","fields":{"slug":"/react/2021-10-27-react-firebase/"},"frontmatter":{"categories":"react","title":"[react] firebase 프로젝트 배포하기","date":"October 27, 2021","emoji":"📓"}},"next":{"fields":{"slug":"/gatsby/2021-10-26-gaysby/"}},"previous":{"fields":{"slug":"/js/2021-10-30-var-let-const/"}}},{"node":{"id":"35f2c219-0e9b-5662-8aa6-0dbbeba60422","excerpt":"프로젝트를 진행할 때마다 모달창을 마주치는 일이 많다. 프론트엔드 프레임워크나 라이브러리를 사용하면 편리성이나 시간을 아낄 수 있기때문에 npm에 등록된 모듈을 사용하곤 했지만, 만들어진 모듈이 아닌 직접 만들어 재사용해 보기로 했다.\r\n 어떻게 만들까?  재사용성 고려하기  Redux없이 만들기  함수형/클래스형 컴포넌트로 각각 만들기 1. 함수형으로 컴포넌트 만들기 -완성된 모습- img/modal-2.gif  *파일구조   재사용할 컴포넌트로 Modal.js 파일을 만들고, App.js에서 불러오도록 했다.  - CSS (함수형/클래스형 공통) - Modal.js - App.js  2. 클래스형으로 컴포넌트 만들기 - Modal.js (재사용 컴포넌트 - 자식) - App.js (부모 컴포넌트) 이로써 어디서든 Modal 컴포넌트를 가지고 와서 재사용할 수 있게 되었다. 모달은 워낙 기본적이고 중요한 부분은 아니라 만들어진 모듈을 사용할때가 많은데, 못만들어서 모듈을 이용하는…","fields":{"slug":"/react/2021-09-21-react-modal/"},"frontmatter":{"categories":"react","title":"[react] 모달 팝업창 만들기 (react modal)","date":"September 21, 2021","emoji":"📓"}},"next":{"fields":{"slug":"/web/2021-09-21-rwd-awd/"}},"previous":{"fields":{"slug":"/js/2021-09-21-function-prototype/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}